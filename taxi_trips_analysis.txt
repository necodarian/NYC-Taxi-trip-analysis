{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6b88b6f4-bceb-4bb1-81b0-f0514910d6c4",
   "metadata": {},
   "source": [
    "## Taxi Trips Analysis Project\n",
    "__________\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "13014284-0c45-484d-9c7a-df9ffb5e905f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import datetime as dt\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f5416bb-cf34-469f-a176-7c5877b27a6a",
   "metadata": {},
   "source": [
    "## 1: Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3ff800b-f7d2-432a-8d5f-0cd3ace726da",
   "metadata": {},
   "source": [
    "#### EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d5976be7-7998-4b92-a0b0-5780017b349f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the dataset\n",
    "df = pd.read_csv('dataset/Assessment 2 dataset/Main Sample.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f8760d96-0807-4b1a-b5d5-89a8620d0b44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>1.10</td>\n",
       "      <td>-73.990372</td>\n",
       "      <td>40.734695</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.981842</td>\n",
       "      <td>40.732407</td>\n",
       "      <td>2</td>\n",
       "      <td>7.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>8.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>5</td>\n",
       "      <td>4.90</td>\n",
       "      <td>-73.980782</td>\n",
       "      <td>40.729912</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.944473</td>\n",
       "      <td>40.716679</td>\n",
       "      <td>1</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>19.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>10.54</td>\n",
       "      <td>-73.984550</td>\n",
       "      <td>40.679565</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.950272</td>\n",
       "      <td>40.788925</td>\n",
       "      <td>1</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>34.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>4.75</td>\n",
       "      <td>-73.993469</td>\n",
       "      <td>40.718990</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.962242</td>\n",
       "      <td>40.657333</td>\n",
       "      <td>2</td>\n",
       "      <td>16.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>17.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>3</td>\n",
       "      <td>1.76</td>\n",
       "      <td>-73.960625</td>\n",
       "      <td>40.781330</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.977264</td>\n",
       "      <td>40.758514</td>\n",
       "      <td>2</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>8.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n",
       "0         2  2016-01-01 00:00:00   2016-01-01 00:00:00                2   \n",
       "1         2  2016-01-01 00:00:00   2016-01-01 00:00:00                5   \n",
       "2         2  2016-01-01 00:00:00   2016-01-01 00:00:00                1   \n",
       "3         2  2016-01-01 00:00:00   2016-01-01 00:00:00                1   \n",
       "4         2  2016-01-01 00:00:00   2016-01-01 00:00:00                3   \n",
       "\n",
       "   trip_distance  pickup_longitude  pickup_latitude  RatecodeID  \\\n",
       "0           1.10        -73.990372        40.734695           1   \n",
       "1           4.90        -73.980782        40.729912           1   \n",
       "2          10.54        -73.984550        40.679565           1   \n",
       "3           4.75        -73.993469        40.718990           1   \n",
       "4           1.76        -73.960625        40.781330           1   \n",
       "\n",
       "  store_and_fwd_flag  dropoff_longitude  dropoff_latitude  payment_type  \\\n",
       "0                  N         -73.981842         40.732407             2   \n",
       "1                  N         -73.944473         40.716679             1   \n",
       "2                  N         -73.950272         40.788925             1   \n",
       "3                  N         -73.962242         40.657333             2   \n",
       "4                  N         -73.977264         40.758514             2   \n",
       "\n",
       "   fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "0          7.5    0.5      0.5         0.0           0.0   \n",
       "1         18.0    0.5      0.5         0.0           0.0   \n",
       "2         33.0    0.5      0.5         0.0           0.0   \n",
       "3         16.5    0.0      0.5         0.0           0.0   \n",
       "4          8.0    0.0      0.5         0.0           0.0   \n",
       "\n",
       "   improvement_surcharge  total_amount  \n",
       "0                    0.3           8.8  \n",
       "1                    0.3          19.3  \n",
       "2                    0.3          34.3  \n",
       "3                    0.3          17.3  \n",
       "4                    0.3           8.8  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# show the first 5 rows of the dataframe\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0d441d4f-1dfb-47d9-81c5-69422e6a015c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10906858, 19)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# show the shape of the dataframe - (rows, columns)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "edcf27e5-f29a-48a8-b480-0dc614214f41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VendorID                   int64\n",
       "tpep_pickup_datetime      object\n",
       "tpep_dropoff_datetime     object\n",
       "passenger_count            int64\n",
       "trip_distance            float64\n",
       "pickup_longitude         float64\n",
       "pickup_latitude          float64\n",
       "RatecodeID                 int64\n",
       "store_and_fwd_flag        object\n",
       "dropoff_longitude        float64\n",
       "dropoff_latitude         float64\n",
       "payment_type               int64\n",
       "fare_amount              float64\n",
       "extra                    float64\n",
       "mta_tax                  float64\n",
       "tip_amount               float64\n",
       "tolls_amount             float64\n",
       "improvement_surcharge    float64\n",
       "total_amount             float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# show the data types of values in the columns\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "796a27d0-b86b-4615-bfa9-8e09505f43ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VendorID                 0\n",
       "tpep_pickup_datetime     0\n",
       "tpep_dropoff_datetime    0\n",
       "passenger_count          0\n",
       "trip_distance            0\n",
       "pickup_longitude         0\n",
       "pickup_latitude          0\n",
       "RatecodeID               0\n",
       "store_and_fwd_flag       0\n",
       "dropoff_longitude        0\n",
       "dropoff_latitude         0\n",
       "payment_type             0\n",
       "fare_amount              0\n",
       "extra                    0\n",
       "mta_tax                  0\n",
       "tip_amount               0\n",
       "tolls_amount             0\n",
       "improvement_surcharge    0\n",
       "total_amount             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# is there any missing values? - no\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "aa41aa5d-6de3-442a-bc91-978703ea019d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>VendorID</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>1.535024</td>\n",
       "      <td>0.498772</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>passenger_count</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>1.670847</td>\n",
       "      <td>1.324891</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>9.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trip_distance</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>4.648197</td>\n",
       "      <td>2981.095329</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.670000</td>\n",
       "      <td>3.080000</td>\n",
       "      <td>8.000010e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pickup_longitude</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>-72.818695</td>\n",
       "      <td>9.168964</td>\n",
       "      <td>-121.934288</td>\n",
       "      <td>-73.991508</td>\n",
       "      <td>-73.981377</td>\n",
       "      <td>-73.966103</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pickup_latitude</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>40.114943</td>\n",
       "      <td>5.051022</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>40.736301</td>\n",
       "      <td>40.753689</td>\n",
       "      <td>40.768082</td>\n",
       "      <td>6.090876e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RatecodeID</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>1.039350</td>\n",
       "      <td>0.518631</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>9.900000e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>-72.886591</td>\n",
       "      <td>8.900841</td>\n",
       "      <td>-121.933487</td>\n",
       "      <td>-73.991074</td>\n",
       "      <td>-73.979424</td>\n",
       "      <td>-73.961960</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>40.153152</td>\n",
       "      <td>4.903456</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>40.734806</td>\n",
       "      <td>40.754131</td>\n",
       "      <td>40.769619</td>\n",
       "      <td>6.090876e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>payment_type</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>1.347536</td>\n",
       "      <td>0.491080</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>5.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fare_amount</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>12.486929</td>\n",
       "      <td>35.564004</td>\n",
       "      <td>-957.600000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>1.112709e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extra</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>0.313076</td>\n",
       "      <td>0.415679</td>\n",
       "      <td>-42.610000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>6.488700e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mta_tax</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>0.497670</td>\n",
       "      <td>0.050467</td>\n",
       "      <td>-0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>8.970000e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tip_amount</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>1.750663</td>\n",
       "      <td>2.623546</td>\n",
       "      <td>-220.800000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.260000</td>\n",
       "      <td>2.320000</td>\n",
       "      <td>9.981400e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tolls_amount</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>0.293345</td>\n",
       "      <td>1.694572</td>\n",
       "      <td>-17.400000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.801500e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>0.299724</td>\n",
       "      <td>0.012326</td>\n",
       "      <td>-0.300000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>3.000000e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_amount</th>\n",
       "      <td>10906858.0</td>\n",
       "      <td>15.641395</td>\n",
       "      <td>36.412802</td>\n",
       "      <td>-958.400000</td>\n",
       "      <td>8.300000</td>\n",
       "      <td>11.620000</td>\n",
       "      <td>17.160000</td>\n",
       "      <td>1.112716e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            count       mean          std         min  \\\n",
       "VendorID               10906858.0   1.535024     0.498772    1.000000   \n",
       "passenger_count        10906858.0   1.670847     1.324891    0.000000   \n",
       "trip_distance          10906858.0   4.648197  2981.095329    0.000000   \n",
       "pickup_longitude       10906858.0 -72.818695     9.168964 -121.934288   \n",
       "pickup_latitude        10906858.0  40.114943     5.051022    0.000000   \n",
       "RatecodeID             10906858.0   1.039350     0.518631    1.000000   \n",
       "dropoff_longitude      10906858.0 -72.886591     8.900841 -121.933487   \n",
       "dropoff_latitude       10906858.0  40.153152     4.903456    0.000000   \n",
       "payment_type           10906858.0   1.347536     0.491080    1.000000   \n",
       "fare_amount            10906858.0  12.486929    35.564004 -957.600000   \n",
       "extra                  10906858.0   0.313076     0.415679  -42.610000   \n",
       "mta_tax                10906858.0   0.497670     0.050467   -0.500000   \n",
       "tip_amount             10906858.0   1.750663     2.623546 -220.800000   \n",
       "tolls_amount           10906858.0   0.293345     1.694572  -17.400000   \n",
       "improvement_surcharge  10906858.0   0.299724     0.012326   -0.300000   \n",
       "total_amount           10906858.0  15.641395    36.412802 -958.400000   \n",
       "\n",
       "                             25%        50%        75%           max  \n",
       "VendorID                1.000000   2.000000   2.000000  2.000000e+00  \n",
       "passenger_count         1.000000   1.000000   2.000000  9.000000e+00  \n",
       "trip_distance           1.000000   1.670000   3.080000  8.000010e+06  \n",
       "pickup_longitude      -73.991508 -73.981377 -73.966103  0.000000e+00  \n",
       "pickup_latitude        40.736301  40.753689  40.768082  6.090876e+01  \n",
       "RatecodeID              1.000000   1.000000   1.000000  9.900000e+01  \n",
       "dropoff_longitude     -73.991074 -73.979424 -73.961960  0.000000e+00  \n",
       "dropoff_latitude       40.734806  40.754131  40.769619  6.090876e+01  \n",
       "payment_type            1.000000   1.000000   2.000000  5.000000e+00  \n",
       "fare_amount             6.500000   9.000000  14.000000  1.112709e+05  \n",
       "extra                   0.000000   0.000000   0.500000  6.488700e+02  \n",
       "mta_tax                 0.500000   0.500000   0.500000  8.970000e+01  \n",
       "tip_amount              0.000000   1.260000   2.320000  9.981400e+02  \n",
       "tolls_amount            0.000000   0.000000   0.000000  9.801500e+02  \n",
       "improvement_surcharge   0.300000   0.300000   0.300000  3.000000e-01  \n",
       "total_amount            8.300000  11.620000  17.160000  1.112716e+05  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# show some descriptive statistics of the numerical columns\n",
    "df.describe().T"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39f1254f-2455-4f4b-ba23-428657f4e081",
   "metadata": {},
   "source": [
    "#### Some numerical values are less than 0, which doesn't make sense. Let's find them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "24b5114f-4892-4f73-a3db-95aade83ad35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1774</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-02 00:50:32</td>\n",
       "      <td>2016-01-02 00:51:16</td>\n",
       "      <td>1</td>\n",
       "      <td>0.26</td>\n",
       "      <td>-73.825645</td>\n",
       "      <td>40.712231</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.830330</td>\n",
       "      <td>40.714161</td>\n",
       "      <td>4</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>-4.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3492</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-02 01:00:59</td>\n",
       "      <td>2016-01-02 01:01:26</td>\n",
       "      <td>1</td>\n",
       "      <td>0.05</td>\n",
       "      <td>-73.938538</td>\n",
       "      <td>40.803200</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4</td>\n",
       "      <td>-2.5</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>-3.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5105</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-02 01:11:25</td>\n",
       "      <td>2016-01-02 01:14:30</td>\n",
       "      <td>1</td>\n",
       "      <td>0.53</td>\n",
       "      <td>-73.955864</td>\n",
       "      <td>40.772270</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.951134</td>\n",
       "      <td>40.774231</td>\n",
       "      <td>4</td>\n",
       "      <td>-4.5</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>-5.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5611</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-02 01:14:29</td>\n",
       "      <td>2016-01-02 01:19:01</td>\n",
       "      <td>1</td>\n",
       "      <td>0.56</td>\n",
       "      <td>-73.991737</td>\n",
       "      <td>40.722214</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.990044</td>\n",
       "      <td>40.728008</td>\n",
       "      <td>3</td>\n",
       "      <td>-5.0</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>-6.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5666</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-02 01:14:51</td>\n",
       "      <td>2016-01-02 01:16:23</td>\n",
       "      <td>2</td>\n",
       "      <td>0.04</td>\n",
       "      <td>-74.006111</td>\n",
       "      <td>40.739841</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-74.005402</td>\n",
       "      <td>40.740799</td>\n",
       "      <td>3</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>-4.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10895616</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-29 08:57:35</td>\n",
       "      <td>2016-01-29 08:59:31</td>\n",
       "      <td>1</td>\n",
       "      <td>0.58</td>\n",
       "      <td>-73.958801</td>\n",
       "      <td>40.772465</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.956360</td>\n",
       "      <td>40.779888</td>\n",
       "      <td>4</td>\n",
       "      <td>-3.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>-4.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10898624</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-29 09:06:34</td>\n",
       "      <td>2016-01-29 09:06:53</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-73.992401</td>\n",
       "      <td>40.715000</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.991859</td>\n",
       "      <td>40.716042</td>\n",
       "      <td>4</td>\n",
       "      <td>-2.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>-3.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10905279</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-29 09:30:29</td>\n",
       "      <td>2016-01-29 09:36:22</td>\n",
       "      <td>1</td>\n",
       "      <td>0.64</td>\n",
       "      <td>-73.995811</td>\n",
       "      <td>40.759682</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.988907</td>\n",
       "      <td>40.766491</td>\n",
       "      <td>4</td>\n",
       "      <td>-5.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>-6.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906542</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-22 23:02:07</td>\n",
       "      <td>2016-01-22 23:02:44</td>\n",
       "      <td>1</td>\n",
       "      <td>0.19</td>\n",
       "      <td>-73.974091</td>\n",
       "      <td>40.788898</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.970230</td>\n",
       "      <td>40.790630</td>\n",
       "      <td>3</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>-4.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906550</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-23 01:30:18</td>\n",
       "      <td>2016-01-23 01:35:59</td>\n",
       "      <td>1</td>\n",
       "      <td>0.79</td>\n",
       "      <td>-73.961853</td>\n",
       "      <td>40.720291</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.959419</td>\n",
       "      <td>40.711571</td>\n",
       "      <td>3</td>\n",
       "      <td>-5.0</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>-6.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4225 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          VendorID tpep_pickup_datetime tpep_dropoff_datetime  \\\n",
       "1774             2  2016-01-02 00:50:32   2016-01-02 00:51:16   \n",
       "3492             2  2016-01-02 01:00:59   2016-01-02 01:01:26   \n",
       "5105             2  2016-01-02 01:11:25   2016-01-02 01:14:30   \n",
       "5611             2  2016-01-02 01:14:29   2016-01-02 01:19:01   \n",
       "5666             2  2016-01-02 01:14:51   2016-01-02 01:16:23   \n",
       "...            ...                  ...                   ...   \n",
       "10895616         2  2016-01-29 08:57:35   2016-01-29 08:59:31   \n",
       "10898624         2  2016-01-29 09:06:34   2016-01-29 09:06:53   \n",
       "10905279         2  2016-01-29 09:30:29   2016-01-29 09:36:22   \n",
       "10906542         2  2016-01-22 23:02:07   2016-01-22 23:02:44   \n",
       "10906550         2  2016-01-23 01:30:18   2016-01-23 01:35:59   \n",
       "\n",
       "          passenger_count  trip_distance  pickup_longitude  pickup_latitude  \\\n",
       "1774                    1           0.26        -73.825645        40.712231   \n",
       "3492                    1           0.05        -73.938538        40.803200   \n",
       "5105                    1           0.53        -73.955864        40.772270   \n",
       "5611                    1           0.56        -73.991737        40.722214   \n",
       "5666                    2           0.04        -74.006111        40.739841   \n",
       "...                   ...            ...               ...              ...   \n",
       "10895616                1           0.58        -73.958801        40.772465   \n",
       "10898624                1           0.00        -73.992401        40.715000   \n",
       "10905279                1           0.64        -73.995811        40.759682   \n",
       "10906542                1           0.19        -73.974091        40.788898   \n",
       "10906550                1           0.79        -73.961853        40.720291   \n",
       "\n",
       "          RatecodeID store_and_fwd_flag  dropoff_longitude  dropoff_latitude  \\\n",
       "1774               1                  N         -73.830330         40.714161   \n",
       "3492               1                  N           0.000000          0.000000   \n",
       "5105               1                  N         -73.951134         40.774231   \n",
       "5611               1                  N         -73.990044         40.728008   \n",
       "5666               1                  N         -74.005402         40.740799   \n",
       "...              ...                ...                ...               ...   \n",
       "10895616           1                  N         -73.956360         40.779888   \n",
       "10898624           1                  N         -73.991859         40.716042   \n",
       "10905279           1                  N         -73.988907         40.766491   \n",
       "10906542           1                  N         -73.970230         40.790630   \n",
       "10906550           1                  N         -73.959419         40.711571   \n",
       "\n",
       "          payment_type  fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "1774                 4         -3.0   -0.5     -0.5         0.0           0.0   \n",
       "3492                 4         -2.5   -0.5     -0.5         0.0           0.0   \n",
       "5105                 4         -4.5   -0.5     -0.5         0.0           0.0   \n",
       "5611                 3         -5.0   -0.5     -0.5         0.0           0.0   \n",
       "5666                 3         -3.0   -0.5     -0.5         0.0           0.0   \n",
       "...                ...          ...    ...      ...         ...           ...   \n",
       "10895616             4         -3.5    0.0     -0.5         0.0           0.0   \n",
       "10898624             4         -2.5    0.0     -0.5         0.0           0.0   \n",
       "10905279             4         -5.5    0.0     -0.5         0.0           0.0   \n",
       "10906542             3         -3.0   -0.5     -0.5         0.0           0.0   \n",
       "10906550             3         -5.0   -0.5     -0.5         0.0           0.0   \n",
       "\n",
       "          improvement_surcharge  total_amount  \n",
       "1774                       -0.3          -4.3  \n",
       "3492                       -0.3          -3.8  \n",
       "5105                       -0.3          -5.8  \n",
       "5611                       -0.3          -6.3  \n",
       "5666                       -0.3          -4.3  \n",
       "...                         ...           ...  \n",
       "10895616                   -0.3          -4.3  \n",
       "10898624                   -0.3          -3.3  \n",
       "10905279                   -0.3          -6.3  \n",
       "10906542                   -0.3          -4.3  \n",
       "10906550                   -0.3          -6.3  \n",
       "\n",
       "[4225 rows x 19 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[(df['tip_amount'] < 0) | (df['fare_amount'] < 0) | (df['extra'] < 0) | (df['mta_tax'] < 0) | (df['tolls_amount'] < 0) | (df['improvement_surcharge'] < 0) | (df['total_amount'] < 0)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "23018bbd-80ae-4f9a-a0d2-41a2272fa8e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['VendorID', 'tpep_pickup_datetime', 'tpep_dropoff_datetime',\n",
       "       'passenger_count', 'trip_distance', 'pickup_longitude',\n",
       "       'pickup_latitude', 'RatecodeID', 'store_and_fwd_flag',\n",
       "       'dropoff_longitude', 'dropoff_latitude', 'payment_type', 'fare_amount',\n",
       "       'extra', 'mta_tax', 'tip_amount', 'tolls_amount',\n",
       "       'improvement_surcharge', 'total_amount'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c136f90-f848-4fa4-8029-0c76dc601aca",
   "metadata": {},
   "source": [
    "#### Let's check if each of the numerical variable is within the dataset description limits"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9f4c711-6d2d-4341-bc6c-60764e91925f",
   "metadata": {},
   "source": [
    "__`Improvement_surcharge:`__`0.30 improvement surcharge assessed trips at the flag drop.`\n",
    "\n",
    "So it should be either 0.30 or 0. Other values to be considered as mistake"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b36aec44-4638-4cf5-8ba0-36ee6e6797ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       " 0.30    10901039\n",
       "-0.30        4202\n",
       " 0.00        1609\n",
       " 0.10           5\n",
       " 0.12           1\n",
       " 0.16           1\n",
       " 0.25           1\n",
       "Name: improvement_surcharge, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['improvement_surcharge'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20c93dd2-9047-4ede-840a-301598741685",
   "metadata": {},
   "source": [
    "__`MTA_tax:`__`0.50 MTA tax that is automatically triggered based on the metered rate in use.`\n",
    "\n",
    "Should be either 0 or 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4e70d9dd-f966-4876-b5fc-cd8f37b41c62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       " 0.50     10859581\n",
       " 0.00        43201\n",
       "-0.50         4062\n",
       " 0.35            2\n",
       " 0.89            1\n",
       " 2.22            1\n",
       " 2.45            1\n",
       " 20.50           1\n",
       " 36.44           1\n",
       " 10.35           1\n",
       " 3.00            1\n",
       " 33.49           1\n",
       " 17.45           1\n",
       " 89.70           1\n",
       " 43.41           1\n",
       " 0.93            1\n",
       "Name: mta_tax, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['mta_tax'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5f59351-b1c6-42e6-8ad9-46b245b89a69",
   "metadata": {},
   "source": [
    "_________\n",
    "__`Extra:`__`Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges.`\n",
    "\n",
    "Should be either 0.5, 1 or 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4fe45f8f-21e7-4145-9a1b-e77d53020512",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       " 0.00      5710200\n",
       " 0.50      3558725\n",
       " 1.00      1635787\n",
       "-0.50         1486\n",
       "-1.00          513\n",
       " 1.50           44\n",
       " 0.02           25\n",
       " 4.50           20\n",
       " 2.00           12\n",
       " 0.04           10\n",
       " 0.20            6\n",
       " 0.30            3\n",
       " 2.50            3\n",
       " 3.50            2\n",
       " 0.70            2\n",
       " 0.45            1\n",
       "-32.69           1\n",
       "-42.61           1\n",
       " 0.80            1\n",
       " 8.50            1\n",
       "-16.65           1\n",
       " 4.71            1\n",
       "-0.45            1\n",
       " 7.00            1\n",
       "-4.50            1\n",
       " 648.87          1\n",
       " 4.10            1\n",
       "-35.64           1\n",
       " 5.00            1\n",
       " 1.30            1\n",
       " 0.10            1\n",
       " 1.45            1\n",
       " 31.80           1\n",
       "-1.65            1\n",
       "-0.20            1\n",
       "Name: extra, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['extra'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ee2d06c-39a1-493f-aa5a-ec6958f3c7c2",
   "metadata": {},
   "source": [
    "_______\n",
    "__`Fare_amount:`__`The time-and-distance fare calculated by the meter.`\n",
    "\n",
    "The fare can be different, but it can't be less than 0 or astronomicaly high"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e3adf21c-b8a8-4544-8e3c-b5fefab4f82d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4269251      -957.60\n",
       "4334878      -434.00\n",
       "2193262      -405.00\n",
       "193432       -300.00\n",
       "923034       -280.00\n",
       "             ...    \n",
       "4751459      3039.00\n",
       "3856423      4001.15\n",
       "3838692      5000.00\n",
       "8499603      8008.00\n",
       "7461456    111270.85\n",
       "Name: fare_amount, Length: 10906858, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['fare_amount'].sort_values()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "494391dd-743a-440e-bb9b-631cfc1ee857",
   "metadata": {},
   "source": [
    "__`Total_amount`__`The total amount charged to passengers`\n",
    "\n",
    "The same situation as with `fare_amount` "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0cf05750-5f5f-4682-907c-9dc122ec6cb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4269251      -958.40\n",
       "4334878      -440.34\n",
       "2193262      -405.30\n",
       "193432       -300.80\n",
       "923034       -280.30\n",
       "             ...    \n",
       "4751459      3045.34\n",
       "3856423      4002.05\n",
       "3838692      5000.80\n",
       "8499603      8008.80\n",
       "7461456    111271.65\n",
       "Name: total_amount, Length: 10906858, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['total_amount'].sort_values()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bc6111c-b338-4be2-a4cf-ab0ef5073aa3",
   "metadata": {},
   "source": [
    "__`Tolls_amount`__`Total amount of all tolls paid in trip.`\n",
    "\n",
    "Can't be negative"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "86c63660-bf0d-4ce3-b93a-a603e44b0328",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "110255      -17.40\n",
       "884722      -17.12\n",
       "7726868     -12.50\n",
       "10459645    -12.50\n",
       "639043      -12.50\n",
       "             ...  \n",
       "598602      882.22\n",
       "5966724     885.59\n",
       "3630019     900.10\n",
       "992315      923.58\n",
       "8548190     980.15\n",
       "Name: tolls_amount, Length: 10906858, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['tolls_amount'].sort_values()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0fd5ec9-71b8-460b-8406-323126958180",
   "metadata": {},
   "source": [
    "__`Tip_amount`__`This field is automatically populated for credit card tips.`\n",
    "\n",
    "Can't be negative"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6cd60e07-6be0-43fc-8f7e-e7baa8b27a76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10724554   -220.80\n",
       "3614225     -70.00\n",
       "7766456     -65.00\n",
       "9649637     -62.00\n",
       "10269801    -34.64\n",
       "             ...  \n",
       "8719432     550.00\n",
       "5274108     800.00\n",
       "180698      800.00\n",
       "1617570     900.00\n",
       "67897       998.14\n",
       "Name: tip_amount, Length: 10906858, dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['tip_amount'].sort_values()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4b2767e-a78c-4c37-8bfe-1a15fb841003",
   "metadata": {},
   "source": [
    "__`Payment_type:`__`A numeric code signifying how the passenger paid for the trip.`\n",
    "\n",
    "Should be:\n",
    "1. Credit card\n",
    "2. Cash\n",
    "3. No charge\n",
    "4. Dispute\n",
    "5. Unknown\n",
    "6. Voided trip\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8804e442-d61a-4a4d-a07c-d9769757641d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    7181476\n",
       "2    3673651\n",
       "3      38319\n",
       "4      13411\n",
       "5          1\n",
       "Name: payment_type, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.payment_type.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b6dc0ecb-7fb8-470c-8f25-31823fff3052",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 5))\n",
    "sns.countplot(data=df, x='payment_type')\n",
    "plt.xticks(np.arange(5), ['Credit Card', 'Cash', 'No Charge', 'Dispute', 'Unknown'])\n",
    "plt.xlabel('Payment Type')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "716f1346-97da-48a9-aba7-1705ae367e97",
   "metadata": {},
   "source": [
    "__`Pickup_longitude`__`Longitude where the meter was engaged.`\n",
    "\n",
    "__`Pickup_latitude`__`Latitude where the meter was engaged.`\n",
    "\n",
    "__`Dropoff_longitude`__`Longitude where the meter was disengaged.`\n",
    "\n",
    "__`Dropoff_ latitude`__`Latitude where the meter was disengaged.`\n",
    "\n",
    "\n",
    "Seems that there are 0 values in these columns, which means actually missing values or inproper geo location"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0cccf998-bee3-4e68-8537-bddf85e7ea6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-01 00:00:19</td>\n",
       "      <td>2016-01-01 00:19:33</td>\n",
       "      <td>1</td>\n",
       "      <td>3.40</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>14.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>15.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-01 00:00:41</td>\n",
       "      <td>2016-01-01 00:00:46</td>\n",
       "      <td>5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>20.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-01 00:01:34</td>\n",
       "      <td>2016-01-01 00:15:38</td>\n",
       "      <td>1</td>\n",
       "      <td>2.90</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>13.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-01 00:01:36</td>\n",
       "      <td>2016-01-01 00:20:36</td>\n",
       "      <td>1</td>\n",
       "      <td>3.55</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>15.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>3.36</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>20.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-01 00:01:37</td>\n",
       "      <td>2016-01-01 00:25:25</td>\n",
       "      <td>2</td>\n",
       "      <td>1.53</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>16.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906034</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-29 09:32:48</td>\n",
       "      <td>2016-01-29 09:47:49</td>\n",
       "      <td>1</td>\n",
       "      <td>2.50</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>12.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906370</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-29 09:33:58</td>\n",
       "      <td>2016-01-29 09:43:28</td>\n",
       "      <td>1</td>\n",
       "      <td>1.10</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>7.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>8.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906404</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-29 09:34:04</td>\n",
       "      <td>2016-01-29 09:44:03</td>\n",
       "      <td>1</td>\n",
       "      <td>0.60</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>10.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906760</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-29 14:52:29</td>\n",
       "      <td>2016-01-29 14:53:29</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-73.952721</td>\n",
       "      <td>40.584633</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>4.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906764</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-29 15:55:10</td>\n",
       "      <td>2016-01-29 15:55:45</td>\n",
       "      <td>5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>4.56</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>185991 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          VendorID tpep_pickup_datetime tpep_dropoff_datetime  \\\n",
       "38               1  2016-01-01 00:00:19   2016-01-01 00:19:33   \n",
       "67               2  2016-01-01 00:00:41   2016-01-01 00:00:46   \n",
       "150              1  2016-01-01 00:01:34   2016-01-01 00:15:38   \n",
       "156              2  2016-01-01 00:01:36   2016-01-01 00:20:36   \n",
       "158              2  2016-01-01 00:01:37   2016-01-01 00:25:25   \n",
       "...            ...                  ...                   ...   \n",
       "10906034         1  2016-01-29 09:32:48   2016-01-29 09:47:49   \n",
       "10906370         1  2016-01-29 09:33:58   2016-01-29 09:43:28   \n",
       "10906404         1  2016-01-29 09:34:04   2016-01-29 09:44:03   \n",
       "10906760         2  2016-01-29 14:52:29   2016-01-29 14:53:29   \n",
       "10906764         2  2016-01-29 15:55:10   2016-01-29 15:55:45   \n",
       "\n",
       "          passenger_count  trip_distance  pickup_longitude  pickup_latitude  \\\n",
       "38                      1           3.40          0.000000         0.000000   \n",
       "67                      5           0.00          0.000000         0.000000   \n",
       "150                     1           2.90          0.000000         0.000000   \n",
       "156                     1           3.55          0.000000         0.000000   \n",
       "158                     2           1.53          0.000000         0.000000   \n",
       "...                   ...            ...               ...              ...   \n",
       "10906034                1           2.50          0.000000         0.000000   \n",
       "10906370                1           1.10          0.000000         0.000000   \n",
       "10906404                1           0.60          0.000000         0.000000   \n",
       "10906760                2           0.00        -73.952721        40.584633   \n",
       "10906764                5           0.00          0.000000         0.000000   \n",
       "\n",
       "          RatecodeID store_and_fwd_flag  dropoff_longitude  dropoff_latitude  \\\n",
       "38                 1                  N                0.0               0.0   \n",
       "67                 3                  N                0.0               0.0   \n",
       "150                1                  N                0.0               0.0   \n",
       "156                1                  N                0.0               0.0   \n",
       "158                1                  N                0.0               0.0   \n",
       "...              ...                ...                ...               ...   \n",
       "10906034           1                  N                0.0               0.0   \n",
       "10906370           1                  N                0.0               0.0   \n",
       "10906404           1                  N                0.0               0.0   \n",
       "10906760           1                  N                0.0               0.0   \n",
       "10906764           1                  N                0.0               0.0   \n",
       "\n",
       "          payment_type  fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "38                   2         14.5    0.5      0.5        0.00           0.0   \n",
       "67                   2         20.0    0.5      0.0        0.00           0.0   \n",
       "150                  2         12.0    0.5      0.5        0.00           0.0   \n",
       "156                  1         15.5    0.5      0.5        3.36           0.0   \n",
       "158                  2         15.0    0.5      0.5        0.00           0.0   \n",
       "...                ...          ...    ...      ...         ...           ...   \n",
       "10906034             2         12.0    0.0      0.5        0.00           0.0   \n",
       "10906370             2          7.5    0.0      0.5        0.00           0.0   \n",
       "10906404             1          7.5    0.0      0.5        2.07           0.0   \n",
       "10906760             1          2.5    0.5      0.5        0.76           0.0   \n",
       "10906764             1          2.5    0.5      0.5        0.76           0.0   \n",
       "\n",
       "          improvement_surcharge  total_amount  \n",
       "38                          0.3         15.80  \n",
       "67                          0.3         20.80  \n",
       "150                         0.3         13.30  \n",
       "156                         0.3         20.16  \n",
       "158                         0.3         16.30  \n",
       "...                         ...           ...  \n",
       "10906034                    0.3         12.80  \n",
       "10906370                    0.3          8.30  \n",
       "10906404                    0.3         10.37  \n",
       "10906760                    0.3          4.56  \n",
       "10906764                    0.3          4.56  \n",
       "\n",
       "[185991 rows x 19 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# showing rows with any coordinate data equals to 0\n",
    "df[(df['dropoff_longitude'] == 0) | (df['dropoff_latitude'] == 0) | (df['pickup_longitude'] == 0) | (df['pickup_latitude'] == 0)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4c09d78-7e72-41ea-8f60-2fc58dc6cd5e",
   "metadata": {},
   "source": [
    "_________\n",
    "__`Store_and_fwd_flag`__`Y = store and forward trip, N = not a store and forward trip`\n",
    "\n",
    "Should be either __Y__ or __N__\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6180f24b-a30c-416d-bd90-be18cfc99f0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "N    10843625\n",
       "Y       63233\n",
       "Name: store_and_fwd_flag, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.store_and_fwd_flag.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "45d0c65a-6b9b-4d92-a8b8-5d49d6bebfe0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=df, x='store_and_fwd_flag');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c68a9b3-359d-4649-9a9a-fe95850f7ab7",
   "metadata": {},
   "source": [
    "________\n",
    "__`RateCodeID`__`The final rate code in effect at the end of the trip.`\n",
    "1. Standard rate\n",
    "2. JFK\n",
    "3. Newark\n",
    "4. Nassau or Westchester\n",
    "5. Negotiated fare\n",
    "6. Group ride"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e4047710-f4a1-46bc-8141-39155bff2ce0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     10626315\n",
       "2       225019\n",
       "5        33688\n",
       "3        16822\n",
       "4         4696\n",
       "99         216\n",
       "6          102\n",
       "Name: RatecodeID, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# What is 99 here?\n",
    "df.RatecodeID.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9d99649-4055-4124-b293-0691cc047d3c",
   "metadata": {},
   "source": [
    "__`Trip_distance`__`The elapsed trip distance in miles reported by the taximeter.`\n",
    "\n",
    "If measured correctly it shouldn't be equal to 0 or astronomicaly high \n",
    "\n",
    "It can also be strange comparing to starting-ending time of the trip (1 hour long trip and 200 miles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1d119fcc-9715-4657-a739-b96e1535ae38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10906857          0.0\n",
       "2047967           0.0\n",
       "6059957           0.0\n",
       "6059997           0.0\n",
       "2047928           0.0\n",
       "              ...    \n",
       "1256517     1403240.5\n",
       "2768776     1653402.0\n",
       "8551614     2441418.8\n",
       "2708971     4667468.7\n",
       "1027151     8000010.0\n",
       "Name: trip_distance, Length: 10906858, dtype: float64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.trip_distance.sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "39c69653-c574-49bc-8871-be87fdccf578",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-01 00:00:41</td>\n",
       "      <td>2016-01-01 00:00:46</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>N</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>20.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-29 09:18:28</td>\n",
       "      <td>2016-01-29 09:18:34</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-73.949928</td>\n",
       "      <td>40.772038</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.949921</td>\n",
       "      <td>40.772034</td>\n",
       "      <td>3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>3.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>336</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-29 09:18:45</td>\n",
       "      <td>2016-01-29 09:18:47</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>8.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>60.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>425</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-29 09:19:02</td>\n",
       "      <td>2016-01-29 09:19:06</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-74.005180</td>\n",
       "      <td>40.706001</td>\n",
       "      <td>5</td>\n",
       "      <td>N</td>\n",
       "      <td>-74.005180</td>\n",
       "      <td>40.705986</td>\n",
       "      <td>2</td>\n",
       "      <td>65.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>65.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>448</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-29 09:19:05</td>\n",
       "      <td>2016-01-29 09:19:05</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-74.009949</td>\n",
       "      <td>40.703251</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>4.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906760</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-29 14:52:29</td>\n",
       "      <td>2016-01-29 14:53:29</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-73.952721</td>\n",
       "      <td>40.584633</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>4.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906764</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-29 15:55:10</td>\n",
       "      <td>2016-01-29 15:55:45</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>4.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906779</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-29 22:48:38</td>\n",
       "      <td>2016-01-29 22:48:47</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-73.987198</td>\n",
       "      <td>40.718418</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.987350</td>\n",
       "      <td>40.718460</td>\n",
       "      <td>2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>3.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906854</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-05 00:15:55</td>\n",
       "      <td>2016-01-05 00:16:06</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-73.945488</td>\n",
       "      <td>40.751530</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.945457</td>\n",
       "      <td>40.751530</td>\n",
       "      <td>2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>3.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906857</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-05 06:15:21</td>\n",
       "      <td>2016-01-05 06:15:36</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-73.960938</td>\n",
       "      <td>40.758595</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.961006</td>\n",
       "      <td>40.758583</td>\n",
       "      <td>2</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.54</td>\n",
       "      <td>0.3</td>\n",
       "      <td>58.34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>64065 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          VendorID tpep_pickup_datetime tpep_dropoff_datetime  \\\n",
       "67               2  2016-01-01 00:00:41   2016-01-01 00:00:46   \n",
       "232              1  2016-01-29 09:18:28   2016-01-29 09:18:34   \n",
       "336              2  2016-01-29 09:18:45   2016-01-29 09:18:47   \n",
       "425              2  2016-01-29 09:19:02   2016-01-29 09:19:06   \n",
       "448              1  2016-01-29 09:19:05   2016-01-29 09:19:05   \n",
       "...            ...                  ...                   ...   \n",
       "10906760         2  2016-01-29 14:52:29   2016-01-29 14:53:29   \n",
       "10906764         2  2016-01-29 15:55:10   2016-01-29 15:55:45   \n",
       "10906779         2  2016-01-29 22:48:38   2016-01-29 22:48:47   \n",
       "10906854         1  2016-01-05 00:15:55   2016-01-05 00:16:06   \n",
       "10906857         1  2016-01-05 06:15:21   2016-01-05 06:15:36   \n",
       "\n",
       "          passenger_count  trip_distance  pickup_longitude  pickup_latitude  \\\n",
       "67                      5            0.0          0.000000         0.000000   \n",
       "232                     1            0.0        -73.949928        40.772038   \n",
       "336                     1            0.0          0.000000         0.000000   \n",
       "425                     1            0.0        -74.005180        40.706001   \n",
       "448                     1            0.0        -74.009949        40.703251   \n",
       "...                   ...            ...               ...              ...   \n",
       "10906760                2            0.0        -73.952721        40.584633   \n",
       "10906764                5            0.0          0.000000         0.000000   \n",
       "10906779                1            0.0        -73.987198        40.718418   \n",
       "10906854                1            0.0        -73.945488        40.751530   \n",
       "10906857                3            0.0        -73.960938        40.758595   \n",
       "\n",
       "          RatecodeID store_and_fwd_flag  dropoff_longitude  dropoff_latitude  \\\n",
       "67                 3                  N           0.000000          0.000000   \n",
       "232                1                  N         -73.949921         40.772034   \n",
       "336                2                  N           0.000000          0.000000   \n",
       "425                5                  N         -74.005180         40.705986   \n",
       "448                1                  N           0.000000          0.000000   \n",
       "...              ...                ...                ...               ...   \n",
       "10906760           1                  N           0.000000          0.000000   \n",
       "10906764           1                  N           0.000000          0.000000   \n",
       "10906779           1                  N         -73.987350         40.718460   \n",
       "10906854           1                  N         -73.945457         40.751530   \n",
       "10906857           2                  N         -73.961006         40.758583   \n",
       "\n",
       "          payment_type  fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "67                   2         20.0    0.5      0.0        0.00          0.00   \n",
       "232                  3          2.5    0.0      0.5        0.00          0.00   \n",
       "336                  1         52.0    0.0      0.5        8.00          0.00   \n",
       "425                  2         65.0    0.0      0.5        0.00          0.00   \n",
       "448                  2          3.5    0.0      0.5        0.00          0.00   \n",
       "...                ...          ...    ...      ...         ...           ...   \n",
       "10906760             1          2.5    0.5      0.5        0.76          0.00   \n",
       "10906764             1          2.5    0.5      0.5        0.76          0.00   \n",
       "10906779             2          2.5    0.5      0.5        0.00          0.00   \n",
       "10906854             2          2.5    0.5      0.5        0.00          0.00   \n",
       "10906857             2         52.0    0.0      0.5        0.00          5.54   \n",
       "\n",
       "          improvement_surcharge  total_amount  \n",
       "67                          0.3         20.80  \n",
       "232                         0.3          3.30  \n",
       "336                         0.3         60.80  \n",
       "425                         0.3         65.80  \n",
       "448                         0.3          4.30  \n",
       "...                         ...           ...  \n",
       "10906760                    0.3          4.56  \n",
       "10906764                    0.3          4.56  \n",
       "10906779                    0.3          3.80  \n",
       "10906854                    0.3          3.80  \n",
       "10906857                    0.3         58.34  \n",
       "\n",
       "[64065 rows x 19 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['trip_distance']==0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "40b25220-6edd-4bb4-8502-c84b57e0441d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1027151</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-04 14:56:45</td>\n",
       "      <td>2016-01-04 15:27:47</td>\n",
       "      <td>1</td>\n",
       "      <td>8000010.0</td>\n",
       "      <td>-73.998978</td>\n",
       "      <td>40.734444</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.939156</td>\n",
       "      <td>40.843288</td>\n",
       "      <td>2</td>\n",
       "      <td>27.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>28.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1046137</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-04 17:12:01</td>\n",
       "      <td>2016-01-04 17:27:36</td>\n",
       "      <td>1</td>\n",
       "      <td>633008.3</td>\n",
       "      <td>-73.991150</td>\n",
       "      <td>40.739609</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.992462</td>\n",
       "      <td>40.713997</td>\n",
       "      <td>2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>4.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1256517</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-05 22:51:22</td>\n",
       "      <td>2016-01-05 22:51:35</td>\n",
       "      <td>1</td>\n",
       "      <td>1403240.5</td>\n",
       "      <td>-73.945007</td>\n",
       "      <td>40.751808</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.944992</td>\n",
       "      <td>40.751827</td>\n",
       "      <td>3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>3.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1256744</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-05 22:53:29</td>\n",
       "      <td>2016-01-05 22:53:49</td>\n",
       "      <td>1</td>\n",
       "      <td>281060.3</td>\n",
       "      <td>-73.945023</td>\n",
       "      <td>40.751831</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.945053</td>\n",
       "      <td>40.751842</td>\n",
       "      <td>3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>3.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2708971</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-28 10:41:15</td>\n",
       "      <td>2016-01-28 11:03:53</td>\n",
       "      <td>1</td>\n",
       "      <td>4667468.7</td>\n",
       "      <td>-74.007156</td>\n",
       "      <td>40.734352</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-74.007782</td>\n",
       "      <td>40.712494</td>\n",
       "      <td>1</td>\n",
       "      <td>14.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>3.06</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>18.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2768776</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-28 11:39:07</td>\n",
       "      <td>2016-01-28 11:41:29</td>\n",
       "      <td>2</td>\n",
       "      <td>1653402.0</td>\n",
       "      <td>-73.945663</td>\n",
       "      <td>40.751747</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.945610</td>\n",
       "      <td>40.751617</td>\n",
       "      <td>2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>3.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8551614</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-21 14:18:40</td>\n",
       "      <td>2016-01-21 14:27:53</td>\n",
       "      <td>4</td>\n",
       "      <td>2441418.8</td>\n",
       "      <td>-73.952095</td>\n",
       "      <td>40.824539</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.948524</td>\n",
       "      <td>40.827324</td>\n",
       "      <td>2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>3.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n",
       "1027151         1  2016-01-04 14:56:45   2016-01-04 15:27:47                1   \n",
       "1046137         1  2016-01-04 17:12:01   2016-01-04 17:27:36                1   \n",
       "1256517         1  2016-01-05 22:51:22   2016-01-05 22:51:35                1   \n",
       "1256744         1  2016-01-05 22:53:29   2016-01-05 22:53:49                1   \n",
       "2708971         1  2016-01-28 10:41:15   2016-01-28 11:03:53                1   \n",
       "2768776         1  2016-01-28 11:39:07   2016-01-28 11:41:29                2   \n",
       "8551614         1  2016-01-21 14:18:40   2016-01-21 14:27:53                4   \n",
       "\n",
       "         trip_distance  pickup_longitude  pickup_latitude  RatecodeID  \\\n",
       "1027151      8000010.0        -73.998978        40.734444           1   \n",
       "1046137       633008.3        -73.991150        40.739609           1   \n",
       "1256517      1403240.5        -73.945007        40.751808           1   \n",
       "1256744       281060.3        -73.945023        40.751831           1   \n",
       "2708971      4667468.7        -74.007156        40.734352           1   \n",
       "2768776      1653402.0        -73.945663        40.751747           1   \n",
       "8551614      2441418.8        -73.952095        40.824539           1   \n",
       "\n",
       "        store_and_fwd_flag  dropoff_longitude  dropoff_latitude  payment_type  \\\n",
       "1027151                  N         -73.939156         40.843288             2   \n",
       "1046137                  N         -73.992462         40.713997             2   \n",
       "1256517                  N         -73.944992         40.751827             3   \n",
       "1256744                  N         -73.945053         40.751842             3   \n",
       "2708971                  N         -74.007782         40.712494             1   \n",
       "2768776                  N         -73.945610         40.751617             2   \n",
       "8551614                  N         -73.948524         40.827324             2   \n",
       "\n",
       "         fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "1027151         27.5    0.0      0.5        0.00           0.0   \n",
       "1046137          2.5    1.0      0.5        0.00           0.0   \n",
       "1256517          2.5    0.5      0.5        0.00           0.0   \n",
       "1256744          2.5    0.0      0.5        0.00           0.0   \n",
       "2708971         14.5    0.0      0.5        3.06           0.0   \n",
       "2768776          2.5    0.0      0.5        0.00           0.0   \n",
       "8551614          2.5    0.0      0.5        0.00           0.0   \n",
       "\n",
       "         improvement_surcharge  total_amount  \n",
       "1027151                    0.3         28.30  \n",
       "1046137                    0.3          4.30  \n",
       "1256517                    0.3          3.80  \n",
       "1256744                    0.3          3.30  \n",
       "2708971                    0.3         18.36  \n",
       "2768776                    0.3          3.30  \n",
       "8551614                    0.3          3.30  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['trip_distance'] > 1000]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "164123d9-0934-4893-bc44-9084760c4d5b",
   "metadata": {},
   "source": [
    "__`Passenger_count`__`The number of passengers in the vehicle. This is a driver-entered value.`\n",
    "\n",
    "0 passengers considered as mistake"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "175fa25a-89c9-4f91-9426-642d269aa03c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    7726984\n",
       "2    1561977\n",
       "5     601079\n",
       "3     436431\n",
       "6     369155\n",
       "4     210641\n",
       "0        520\n",
       "8         26\n",
       "9         23\n",
       "7         22\n",
       "Name: passenger_count, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['passenger_count'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "937208f6-5ed2-4927-af4a-387c86d4f89d",
   "metadata": {},
   "source": [
    "__`VendorID`__`A code indicating the TPEP provider that provided the record.\n",
    "1. Creative Mobile Technologies\n",
    "2. VeriFone Inc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b30a9323-1323-463c-80e0-792a81fb021e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    5835429\n",
       "1    5071429\n",
       "Name: VendorID, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['VendorID'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d4890af7-21a0-4c08-8b3d-16ae1ede247d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=df, x='VendorID');\n",
    "plt.xticks([0,1], [])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "853c4282-9366-45f1-a65f-81867a9100b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['VendorID', 'tpep_pickup_datetime', 'tpep_dropoff_datetime',\n",
       "       'passenger_count', 'trip_distance', 'pickup_longitude',\n",
       "       'pickup_latitude', 'RatecodeID', 'store_and_fwd_flag',\n",
       "       'dropoff_longitude', 'dropoff_latitude', 'payment_type', 'fare_amount',\n",
       "       'extra', 'mta_tax', 'tip_amount', 'tolls_amount',\n",
       "       'improvement_surcharge', 'total_amount'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82509a24-cd51-4a61-a7f0-bb2ce6ad1b9c",
   "metadata": {},
   "source": [
    "## 2: Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90dfb5f6-ab89-4aa1-ae2e-39b7cb0fe90d",
   "metadata": {},
   "source": [
    "### Data Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d32ea885-a1a8-48f1-a208-7ba298f770dd",
   "metadata": {},
   "source": [
    "It looks that there are some incorrect values in the dataset, so it needs to be cleaned and preprocessed for further analysis.\n",
    "\n",
    "There are several ways to deal with incorrect or missing values. One way, for example, is to impute or replace bad values by the most closely to truth.\n",
    "However, in this case I decided to drop trips where we have totally wrong numberic values, because one improper value led to the final `total_amount` mistake and also because amog more that 10 mio trips we have just few rows with wrong data, so deleting them won't change the overall picture, but will definetely increase the accuracy of our analysis.\n",
    "\n",
    "Steps to perform:\n",
    "1. Change all money-related negative values to non-negative by taking their absolute values\n",
    "3. Remove trips where `improvement_surcharge` is not equal to 0.3 or 0\n",
    "4. Remove trips where `mta_tax` is not equal to 0 or .5\n",
    "5. Remove trips where `extra` is not equal to .5, 1 or 0\n",
    "6. Remove extremely high `Fare_amount` and `total_amount`\n",
    "7. Replace '99' in `RateCodeID` with the most frequently observed `1`\n",
    "8. Remove rows with extremely high values of `Tip_amount`, `Tolls_amount`, `fare_amount` and `Total_amount`\n",
    "9. Convert date columns to datetime format"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a27440b-fbc5-4713-a6f8-2ed727ae358f",
   "metadata": {},
   "source": [
    "#### Negative to non-negative"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "80a0e4fb-8126-478b-bba0-8ffcfb01dca5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['VendorID', 'tpep_pickup_datetime', 'tpep_dropoff_datetime',\n",
       "       'passenger_count', 'trip_distance', 'pickup_longitude',\n",
       "       'pickup_latitude', 'RatecodeID', 'store_and_fwd_flag',\n",
       "       'dropoff_longitude', 'dropoff_latitude', 'payment_type', 'fare_amount',\n",
       "       'extra', 'mta_tax', 'tip_amount', 'tolls_amount',\n",
       "       'improvement_surcharge', 'total_amount'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = df.copy()\n",
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "80f06f8e-6201-4da8-af0e-015832a285f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['fare_amount', 'extra', 'mta_tax', 'tip_amount', 'tolls_amount',\n",
       "       'improvement_surcharge', 'total_amount'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# take columns with money-related numerical values\n",
    "data.columns[-7:] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8b4e9408-6db0-4a82-9548-a8fd9f290892",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fare_amount              4216\n",
       "extra                    2007\n",
       "mta_tax                  4062\n",
       "tip_amount                128\n",
       "tolls_amount               24\n",
       "improvement_surcharge    4202\n",
       "total_amount             4217\n",
       "dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# show how much negative values we have there\n",
    "(data.loc[:, data.columns[-7:]] < 0).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4d1d4702-dd9c-444e-91d4-31fe284bf451",
   "metadata": {},
   "outputs": [],
   "source": [
    "# take the absolute value of all our money-related values\n",
    "data.loc[:, data.columns[-7:]] = data.loc[:, data.columns[-7:]].abs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1589e620-c43f-474d-af31-56d3c5e348dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fare_amount              0\n",
       "extra                    0\n",
       "mta_tax                  0\n",
       "tip_amount               0\n",
       "tolls_amount             0\n",
       "improvement_surcharge    0\n",
       "total_amount             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# now we don't have negatives\n",
    "(data.loc[:, data.columns[-7:]] < 0).sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c45335d-278e-4c27-8217-e85d89a81468",
   "metadata": {},
   "source": [
    "#### Remove trips with wrong `extra`, `mta_tax` and `improvement_surcharge` data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "8f25e9ec-e6f1-4fca-8191-47eb76e9461b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['VendorID', 'tpep_pickup_datetime', 'tpep_dropoff_datetime',\n",
       "       'passenger_count', 'trip_distance', 'pickup_longitude',\n",
       "       'pickup_latitude', 'RatecodeID', 'store_and_fwd_flag',\n",
       "       'dropoff_longitude', 'dropoff_latitude', 'payment_type', 'fare_amount',\n",
       "       'extra', 'mta_tax', 'tip_amount', 'tolls_amount',\n",
       "       'improvement_surcharge', 'total_amount'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0006e775-12b5-46ce-80ef-9460f5388070",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "159"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# there are only 159 rows with incorrect money values, so delete them\n",
    "data[(~data['improvement_surcharge'].isin([.3, 0])) |\n",
    "     (~data['mta_tax'].isin([.5, 0])) |\n",
    "     (~data['extra'].isin([.5, 1, 0]))].shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "7d48fcd0-dc40-4c18-9bdb-5dffa80d7713",
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop the rows with bad values\n",
    "data.drop(data[(~data['improvement_surcharge'].isin([.3, 0])) |\n",
    "               (~data['mta_tax'].isin([.5, 0])) |\n",
    "               (~data['extra'].isin([.5, 1, 0]))].index, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "d4c685aa-8c73-48e1-be58-5dcc4c97570f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "159"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check that we deleted only 159 rows\n",
    "df.shape[0] - data.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08b5493f-013d-46db-b235-bedf65de9970",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Replace '99' in `RateCodeID` to '1'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "18e41937-d2ed-405e-b011-ea1482877675",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "214"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# number of rows where 'RatecodeID' is 99 before \n",
    "data[data['RatecodeID'] == 99].shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "9f2fabab-f843-4eb9-a496-bf28949bc392",
   "metadata": {},
   "outputs": [],
   "source": [
    "# replacing '99' with '1', keeping other untouched \n",
    "data['RatecodeID'] = np.where(data['RatecodeID'] == 99, 1, data['RatecodeID'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c92348ac-ef87-448c-9131-6a7d7d86245c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# number of rows where 'RatecodeID' is 99 after\n",
    "data[data['RatecodeID'] == 99].shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1c514a3-97c9-4a45-a912-1ff6448510b3",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Dealing with `Tip_amount`, `Tolls_amount`, `fare_amount` and `Total_amount`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2770e885-082e-4091-8bd9-b7ec011e1e00",
   "metadata": {},
   "source": [
    "We have some outlier values in these columns. However, we don't know if all of them wrong or not.\n",
    "\n",
    "I would propose to keep all of the high values, except top 2 of `total_amount` and `fare_amount`, for __Talk A__.\n",
    "\n",
    "For __Task B__ we'll probably remove the outliers in order to increase the model accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5167149f-d9d7-4093-b028-69d5b0f921aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>99.99%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>tip_amount</th>\n",
       "      <td>10906699.0</td>\n",
       "      <td>1.750782</td>\n",
       "      <td>2.623411</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.26</td>\n",
       "      <td>2.32</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>998.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tolls_amount</th>\n",
       "      <td>10906699.0</td>\n",
       "      <td>0.293374</td>\n",
       "      <td>1.694555</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>21.800000</td>\n",
       "      <td>980.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fare_amount</th>\n",
       "      <td>10906699.0</td>\n",
       "      <td>12.493146</td>\n",
       "      <td>35.446353</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.00</td>\n",
       "      <td>14.00</td>\n",
       "      <td>190.000000</td>\n",
       "      <td>111270.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_amount</th>\n",
       "      <td>10906699.0</td>\n",
       "      <td>15.648501</td>\n",
       "      <td>36.296233</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.62</td>\n",
       "      <td>17.16</td>\n",
       "      <td>215.109812</td>\n",
       "      <td>111271.65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   count       mean        std  min    50%    75%      99.99%  \\\n",
       "tip_amount    10906699.0   1.750782   2.623411  0.0   1.26   2.32   50.000000   \n",
       "tolls_amount  10906699.0   0.293374   1.694555  0.0   0.00   0.00   21.800000   \n",
       "fare_amount   10906699.0  12.493146  35.446353  0.0   9.00  14.00  190.000000   \n",
       "total_amount  10906699.0  15.648501  36.296233  0.0  11.62  17.16  215.109812   \n",
       "\n",
       "                    max  \n",
       "tip_amount       998.14  \n",
       "tolls_amount     980.15  \n",
       "fare_amount   111270.85  \n",
       "total_amount  111271.65  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[['tip_amount', 'tolls_amount', 'fare_amount', 'total_amount']].describe(percentiles=[.5, .75, .9999]).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "781acdba-28fb-4ba9-96dc-5d672d63b980",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(4, 1, figsize=(20, 4))\n",
    "sns.boxplot(data=data, x='total_amount', ax=axs[0])\n",
    "sns.boxplot(data=data, x='fare_amount', ax=axs[1])\n",
    "sns.boxplot(data=data, x='tip_amount', ax=axs[2])\n",
    "sns.boxplot(data=data, x='tolls_amount', ax=axs[3])\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b79c7840-d7d1-4eac-a3e2-abbf25ae5e30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7461456    111270.85\n",
       "3838692      5000.00\n",
       "Name: fare_amount, dtype: float64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# what are those 2 highest values of fare_amount?\n",
    "top2fare = data['fare_amount'].sort_values(ascending=False).head(2)\n",
    "top2fare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "4109b33f-5e1f-411a-bd3b-056dd606e0cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7461456    111271.65\n",
       "3838692      5000.80\n",
       "Name: total_amount, dtype: float64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# what are those 2 highest values of total_amount?\n",
    "top2total = data['total_amount'].sort_values(ascending=False).head(2)\n",
    "top2total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "91860282-aad4-4565-b34e-356b77af540f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3838692</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-25 16:32:07</td>\n",
       "      <td>2016-01-25 16:32:12</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-73.981445</td>\n",
       "      <td>40.684433</td>\n",
       "      <td>6</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.981308</td>\n",
       "      <td>40.684326</td>\n",
       "      <td>2</td>\n",
       "      <td>5000.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>5000.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7461456</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-30 14:41:23</td>\n",
       "      <td>2016-01-30 14:48:55</td>\n",
       "      <td>1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>-73.991638</td>\n",
       "      <td>40.754616</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.980461</td>\n",
       "      <td>40.763241</td>\n",
       "      <td>2</td>\n",
       "      <td>111270.85</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>111271.65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n",
       "3838692         1  2016-01-25 16:32:07   2016-01-25 16:32:12                1   \n",
       "7461456         1  2016-01-30 14:41:23   2016-01-30 14:48:55                1   \n",
       "\n",
       "         trip_distance  pickup_longitude  pickup_latitude  RatecodeID  \\\n",
       "3838692            0.0        -73.981445        40.684433           6   \n",
       "7461456            0.9        -73.991638        40.754616           1   \n",
       "\n",
       "        store_and_fwd_flag  dropoff_longitude  dropoff_latitude  payment_type  \\\n",
       "3838692                  N         -73.981308         40.684326             2   \n",
       "7461456                  N         -73.980461         40.763241             2   \n",
       "\n",
       "         fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "3838692      5000.00    0.0      0.5         0.0           0.0   \n",
       "7461456    111270.85    0.0      0.5         0.0           0.0   \n",
       "\n",
       "         improvement_surcharge  total_amount  \n",
       "3838692                    0.3       5000.80  \n",
       "7461456                    0.3     111271.65  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data['fare_amount'].isin(top2fare.tolist())]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "a6fa96db-71fa-4062-b935-dac503982f6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3838692</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-25 16:32:07</td>\n",
       "      <td>2016-01-25 16:32:12</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-73.981445</td>\n",
       "      <td>40.684433</td>\n",
       "      <td>6</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.981308</td>\n",
       "      <td>40.684326</td>\n",
       "      <td>2</td>\n",
       "      <td>5000.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>5000.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7461456</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-30 14:41:23</td>\n",
       "      <td>2016-01-30 14:48:55</td>\n",
       "      <td>1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>-73.991638</td>\n",
       "      <td>40.754616</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.980461</td>\n",
       "      <td>40.763241</td>\n",
       "      <td>2</td>\n",
       "      <td>111270.85</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>111271.65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n",
       "3838692         1  2016-01-25 16:32:07   2016-01-25 16:32:12                1   \n",
       "7461456         1  2016-01-30 14:41:23   2016-01-30 14:48:55                1   \n",
       "\n",
       "         trip_distance  pickup_longitude  pickup_latitude  RatecodeID  \\\n",
       "3838692            0.0        -73.981445        40.684433           6   \n",
       "7461456            0.9        -73.991638        40.754616           1   \n",
       "\n",
       "        store_and_fwd_flag  dropoff_longitude  dropoff_latitude  payment_type  \\\n",
       "3838692                  N         -73.981308         40.684326             2   \n",
       "7461456                  N         -73.980461         40.763241             2   \n",
       "\n",
       "         fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "3838692      5000.00    0.0      0.5         0.0           0.0   \n",
       "7461456    111270.85    0.0      0.5         0.0           0.0   \n",
       "\n",
       "         improvement_surcharge  total_amount  \n",
       "3838692                    0.3       5000.80  \n",
       "7461456                    0.3     111271.65  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data['total_amount'].isin(top2total.tolist())]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10aa7b68-7f76-46e4-a26a-1ccf38b88d4d",
   "metadata": {},
   "source": [
    "Let's remove from our dataframe these two trips"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "2289bbca-8955-4e0b-b8ba-153dbbf6ba91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10906699, 19)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "87d2a9a4-be70-4cb6-8ab0-c8c7666688b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# removing top 2 values of total_amount and fare_amount\n",
    "data.drop(data[data['fare_amount'].isin(top2fare.tolist())].index, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "4f18ea5c-2c1e-46e0-a4e7-f10f5d1a7d92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10906697, 19)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c56231f9-1f53-4e6e-ab89-71081a0af1be",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Convert date columns to datetime format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "fed93d70-1cd9-4ad4-8eeb-65e156404dc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['tpep_pickup_datetime'] = pd.to_datetime(data['tpep_pickup_datetime'])\n",
    "data['tpep_dropoff_datetime'] = pd.to_datetime(data['tpep_dropoff_datetime'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "5bb06057-b2f0-46b2-9196-a68f4cc4cece",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VendorID                          int64\n",
       "tpep_pickup_datetime     datetime64[ns]\n",
       "tpep_dropoff_datetime    datetime64[ns]\n",
       "passenger_count                   int64\n",
       "trip_distance                   float64\n",
       "pickup_longitude                float64\n",
       "pickup_latitude                 float64\n",
       "RatecodeID                        int64\n",
       "store_and_fwd_flag               object\n",
       "dropoff_longitude               float64\n",
       "dropoff_latitude                float64\n",
       "payment_type                      int64\n",
       "fare_amount                     float64\n",
       "extra                           float64\n",
       "mta_tax                         float64\n",
       "tip_amount                      float64\n",
       "tolls_amount                    float64\n",
       "improvement_surcharge           float64\n",
       "total_amount                    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1524852a-5e1c-4d92-af29-028f0d56d0aa",
   "metadata": {},
   "source": [
    "### Task A\n",
    "\n",
    "For this task we'll need to work with datetime and total amount data from the preprocessed dataset.\n",
    "\n",
    "A target datetime column will be `tpep_pickup_datetime`. I will calculate daily and hourly trends based on the time of the taxi trip start.\n",
    "\n",
    "Also, I will create temporary additional columns to answer the questions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "e7243e3a-8471-42db-bf10-5908a6904eb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# take only 2 needed columns from the cleaned dataset\n",
    "data_1 = data[['tpep_pickup_datetime', 'total_amount']].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "4335763e-9e05-43b3-bd18-5ad80a097b54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>day_time</th>\n",
       "      <th>day_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>8.80</td>\n",
       "      <td>night</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>19.30</td>\n",
       "      <td>night</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>34.30</td>\n",
       "      <td>night</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>17.30</td>\n",
       "      <td>night</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>8.80</td>\n",
       "      <td>night</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906853</th>\n",
       "      <td>2016-01-31 23:30:32</td>\n",
       "      <td>9.80</td>\n",
       "      <td>evening</td>\n",
       "      <td>Sunday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906854</th>\n",
       "      <td>2016-01-05 00:15:55</td>\n",
       "      <td>3.80</td>\n",
       "      <td>night</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906855</th>\n",
       "      <td>2016-01-05 06:12:46</td>\n",
       "      <td>8.80</td>\n",
       "      <td>morning</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906856</th>\n",
       "      <td>2016-01-05 06:21:44</td>\n",
       "      <td>14.75</td>\n",
       "      <td>morning</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10906857</th>\n",
       "      <td>2016-01-05 06:15:21</td>\n",
       "      <td>58.34</td>\n",
       "      <td>morning</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10906697 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         tpep_pickup_datetime  total_amount day_time day_name\n",
       "0         2016-01-01 00:00:00          8.80    night   Friday\n",
       "1         2016-01-01 00:00:00         19.30    night   Friday\n",
       "2         2016-01-01 00:00:00         34.30    night   Friday\n",
       "3         2016-01-01 00:00:00         17.30    night   Friday\n",
       "4         2016-01-01 00:00:00          8.80    night   Friday\n",
       "...                       ...           ...      ...      ...\n",
       "10906853  2016-01-31 23:30:32          9.80  evening   Sunday\n",
       "10906854  2016-01-05 00:15:55          3.80    night  Tuesday\n",
       "10906855  2016-01-05 06:12:46          8.80  morning  Tuesday\n",
       "10906856  2016-01-05 06:21:44         14.75  morning  Tuesday\n",
       "10906857  2016-01-05 06:15:21         58.34  morning  Tuesday\n",
       "\n",
       "[10906697 rows x 4 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create additional columns for Task A.ii and Task A.iii\n",
    "# morning: 06:00 - 11:59\n",
    "# afternoon: 12:00-17:59\n",
    "# evening: 18:00-23:59\n",
    "# night: 00:00-05:59\n",
    "data_1['day_time'] = 'NA'\n",
    "data_1['day_time'] = np.where(data_1['tpep_pickup_datetime'].dt.hour.isin(np.arange(6, 12, 1)), 'morning', data_1['day_time'])\n",
    "data_1['day_time'] = np.where(data_1['tpep_pickup_datetime'].dt.hour.isin(np.arange(12, 18, 1)), 'afternoon', data_1['day_time'])\n",
    "data_1['day_time'] = np.where(data_1['tpep_pickup_datetime'].dt.hour.isin(np.arange(18, 24, 1)), 'evening', data_1['day_time'])\n",
    "data_1['day_time'] = np.where(data_1['tpep_pickup_datetime'].dt.hour.isin(np.arange(0, 6, 1)), 'night', data_1['day_time'])\n",
    "\n",
    "# day names\n",
    "data_1['day_name'] = data_1['tpep_pickup_datetime'].dt.day_name()\n",
    "\n",
    "data_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f4d15ef-3b6d-4102-8f24-979b5e195ae0",
   "metadata": {},
   "source": [
    "#### Task A.i\n",
    "\n",
    "What is the average demand for the taxis in the days of the week (i.e., daily trend). Which of the days has the highest and which lowest demand?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "d0ba67d9-801b-4ed4-953f-47b7b4e3ee2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>avg_demand</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weekday</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.117576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.130512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.136143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.141594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.180859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.150737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.142580</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         avg_demand\n",
       "weekday            \n",
       "0          0.117576\n",
       "1          0.130512\n",
       "2          0.136143\n",
       "3          0.141594\n",
       "4          0.180859\n",
       "5          0.150737\n",
       "6          0.142580"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "daily_demand = data_1[['tpep_pickup_datetime']].groupby(data_1['tpep_pickup_datetime'].dt.weekday).count().rename(columns={'tpep_pickup_datetime':'avg_demand'})\n",
    "daily_demand.index.rename('weekday', inplace=True)\n",
    "daily_demand['avg_demand'] = daily_demand['avg_demand']/data.shape[0]\n",
    "daily_demand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "83fcd0fa-0ace-448d-9364-f83c2f7d1b34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 4))\n",
    "sns.lineplot(data=daily_demand)\n",
    "plt.xticks(np.arange(7), ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcdddb9e-54ea-455b-b5d5-23f5474dbb6c",
   "metadata": {},
   "source": [
    "Top demand day is Friday"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71ad3469-a89e-40be-9aa4-be99a90605da",
   "metadata": {},
   "source": [
    "#### Task A.ii\n",
    "\n",
    "Which time of the day (morning, afternoon, evening, and night) is likely be a peak period for the taxi’s operation from the data?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "58b7a730-3cf4-4968-9609-a63aa1de9a53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>demand</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>day_time</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>afternoon</th>\n",
       "      <td>3296961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>evening</th>\n",
       "      <td>3670543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>morning</th>\n",
       "      <td>2607360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>night</th>\n",
       "      <td>1331833</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            demand\n",
       "day_time          \n",
       "afternoon  3296961\n",
       "evening    3670543\n",
       "morning    2607360\n",
       "night      1331833"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hourly_demand = data_1.groupby(data_1['day_time']).tpep_pickup_datetime.count().to_frame()\n",
    "hourly_demand = hourly_demand.rename(columns={'tpep_pickup_datetime':'demand'})\n",
    "hourly_demand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "9cb3a452-e806-47f7-92ee-db749fd61d43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 4))\n",
    "sns.lineplot(data=hourly_demand)\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72a15a40-a2ff-4f54-9b25-644c908ebfce",
   "metadata": {},
   "source": [
    "Evening is the peak part of the day in terms of taxi demand "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36ff0d17-5665-4e82-aab0-3e106060c5f6",
   "metadata": {},
   "source": [
    "#### Task A.iii\n",
    "\n",
    "On average, how much revenue was generated in the weekdays and weekends for the business for the period covered in the dataset?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "9628de59-8a3a-491b-b21c-debb3140374f",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_1['working_weekend'] = np.where(data_1.tpep_pickup_datetime.dt.weekday.isin(np.arange(5)), 'weekday', 'weekend')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "9a63a604-49be-45ff-a49e-5bd461067cce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "weekday    7707582\n",
       "weekend    3199115\n",
       "Name: working_weekend, dtype: int64"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_1.working_weekend.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "976138bd-6d11-4107-a494-01d460bf5b80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>average_revenue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>working_weekend</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>weekday</th>\n",
       "      <td>15.866139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weekend</th>\n",
       "      <td>15.087812</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 average_revenue\n",
       "working_weekend                 \n",
       "weekday                15.866139\n",
       "weekend                15.087812"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_1.groupby('working_weekend').mean().rename(columns={'total_amount':'average_revenue'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "9a55ecfc-d522-4dc1-894d-244dbf791e6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>average_revenue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>day_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Friday</th>\n",
       "      <td>15.671595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Monday</th>\n",
       "      <td>16.037919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Saturday</th>\n",
       "      <td>14.748544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sunday</th>\n",
       "      <td>15.446491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thursday</th>\n",
       "      <td>15.953231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tuesday</th>\n",
       "      <td>15.997315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wednesday</th>\n",
       "      <td>15.759897</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           average_revenue\n",
       "day_name                  \n",
       "Friday           15.671595\n",
       "Monday           16.037919\n",
       "Saturday         14.748544\n",
       "Sunday           15.446491\n",
       "Thursday         15.953231\n",
       "Tuesday          15.997315\n",
       "Wednesday        15.759897"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_1.groupby('day_name').mean().rename(columns={'total_amount':'average_revenue'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "c17754c9-f8be-4dbf-b1f5-906167ca2f5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the average revenue for two groups of days - weekdays and weekends\n",
    "plt.figure(figsize=(10, 4))\n",
    "sns.barplot(data=data_1, x='working_weekend', y='total_amount', ci=None);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "8ddc6062-7921-4d84-ae61-f853c0ad9a79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_amount</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>day_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Friday</th>\n",
       "      <td>15.671595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Monday</th>\n",
       "      <td>16.037919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Saturday</th>\n",
       "      <td>14.748544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sunday</th>\n",
       "      <td>15.446491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thursday</th>\n",
       "      <td>15.953231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tuesday</th>\n",
       "      <td>15.997315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wednesday</th>\n",
       "      <td>15.759897</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           total_amount\n",
       "day_name               \n",
       "Friday        15.671595\n",
       "Monday        16.037919\n",
       "Saturday      14.748544\n",
       "Sunday        15.446491\n",
       "Thursday      15.953231\n",
       "Tuesday       15.997315\n",
       "Wednesday     15.759897"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_1.groupby('day_name').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "85b7dd69-7595-4e3f-8c8a-3d3a0c192b3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the average revenue for day name \n",
    "plt.figure(figsize=(10, 4))\n",
    "sns.barplot(data=data_1, x='day_name', y='total_amount', ci=None);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "767bb3e5-6d0b-46fc-8bfc-2e32b0e9a86d",
   "metadata": {},
   "source": [
    "## 3: Regression Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a19e3543-7fe4-4b32-adea-b93e0069d9c6",
   "metadata": {},
   "source": [
    "### Task B"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3492fcae-a1ca-4c1c-b583-c5fa3422a7c2",
   "metadata": {},
   "source": [
    "First of all, in order to have max accurate prediction model I will remove all outliers from the data. Those values are not necessarily the mistakes. That's why I didn't remove them before analyzing weekly/daily patterns. But those outliers can badly influence on the prediction model performance, so I remove them now."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59537d45-9526-41e3-94a2-4cdbc543acf0",
   "metadata": {},
   "source": [
    "1. `passenger_count` - Number of passengers. 7,8,9 are rare enough to not count them. 0 passengers is meaningless."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "7278b418-0347-4235-9ca2-fa6711d213db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    7726841\n",
       "2    1561964\n",
       "5     601079\n",
       "3     436428\n",
       "6     369155\n",
       "4     210640\n",
       "0        519\n",
       "8         26\n",
       "9         23\n",
       "7         22\n",
       "Name: passenger_count, dtype: int64"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.passenger_count.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "a6daba2a-e8ec-4c65-a829-106ac0196889",
   "metadata": {},
   "outputs": [],
   "source": [
    "# keep only the trips with 1 t o 6 passengers\n",
    "data_b = data[data['passenger_count'].isin([1, 2, 3, 4, 5, 6])]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62224362-1c2a-404c-8dc0-33875da4421c",
   "metadata": {},
   "source": [
    "2. `Fare_amount` - seems to be the most influencial and the highest contributor to the target `total_amount` variable. There are some very large unreal values. So, I will keep only those that are inside the 99.95% percentile."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "0ae330fc-9169-4994-8ed7-80d5b9f5abec",
   "metadata": {},
   "outputs": [],
   "source": [
    "# keep only first 99.95% of fare_amounts\n",
    "data_b = data_b[data_b['fare_amount'] <= data_b['fare_amount'].quantile(0.9995)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17bb3d39-d781-44b0-b49f-9e59b3c80fcd",
   "metadata": {},
   "source": [
    "3. `trip_distance` - Unfortunately, some of the records are incorrect. I'll keep the first 99.95% of these values as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "7b15b3da-f9ff-437d-ad15-42461e3f43e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# keep only the records with trip distance less than the 99.95% percentile\n",
    "data_b = data_b[data_b['trip_distance'] <= data_b['trip_distance'].quantile(0.9995)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cbf9055-1048-4083-abd1-c00d645558ed",
   "metadata": {},
   "source": [
    "4. `tip_amount` - Although the tips can be huge, they're rarely greater than certain amount. I'll keep the first 99.95% of these values as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "1ed0d1e0-8de4-4a32-8518-2191e908de18",
   "metadata": {},
   "outputs": [],
   "source": [
    "# keep only the records with tip amount less than the 99.95% percentile\n",
    "data_b = data_b[data_b['tip_amount'] <= data_b['tip_amount'].quantile(0.9995)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69f8f81f-e979-4226-8748-26f8c1a78d50",
   "metadata": {},
   "source": [
    "5. `tolls_amount` - The same approach here - I'll keep the first 99.95% of these values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "ef67cc55-8598-4465-8308-e8aa0c089ba5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# keep only the records with tolls amount less than the 99.95% percentile\n",
    "data_b = data_b[data_b['tolls_amount'] <= data_b['tolls_amount'].quantile(0.9995)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d10a9852-f91f-466b-98e4-c2db7808d549",
   "metadata": {},
   "source": [
    "6. `payment_type` - seems that only payments made by credit card and in cash are meaningfull, so I'll keep only types 1 and 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "0054290c-56ec-4187-940f-a6129636eb22",
   "metadata": {},
   "outputs": [],
   "source": [
    "# keep only the records with payment type 1 and 2\n",
    "data_b = data_b[data_b['payment_type'].isin([1,2])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "a971ef5d-8eaf-478d-86d9-ea8c189b649b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>99.95%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>VendorID</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>1.537194</td>\n",
       "      <td>0.498615</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>passenger_count</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>1.672939</td>\n",
       "      <td>1.326974</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trip_distance</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>2.864503</td>\n",
       "      <td>3.477488</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.670000</td>\n",
       "      <td>3.060000</td>\n",
       "      <td>23.400000</td>\n",
       "      <td>26.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pickup_longitude</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>-72.829468</td>\n",
       "      <td>9.127288</td>\n",
       "      <td>-121.934288</td>\n",
       "      <td>-73.991508</td>\n",
       "      <td>-73.981392</td>\n",
       "      <td>-73.966164</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pickup_latitude</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>40.120878</td>\n",
       "      <td>5.028075</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>40.736408</td>\n",
       "      <td>40.753738</td>\n",
       "      <td>40.768108</td>\n",
       "      <td>40.851388</td>\n",
       "      <td>60.908756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RatecodeID</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>1.032457</td>\n",
       "      <td>0.251059</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>-72.894300</td>\n",
       "      <td>8.869680</td>\n",
       "      <td>-121.933487</td>\n",
       "      <td>-73.991058</td>\n",
       "      <td>-73.979424</td>\n",
       "      <td>-73.962021</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>40.157452</td>\n",
       "      <td>4.886301</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>40.734928</td>\n",
       "      <td>40.754189</td>\n",
       "      <td>40.769634</td>\n",
       "      <td>40.896264</td>\n",
       "      <td>60.908756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>payment_type</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>1.338691</td>\n",
       "      <td>0.473265</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fare_amount</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>12.339944</td>\n",
       "      <td>10.014654</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>110.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extra</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>0.313497</td>\n",
       "      <td>0.365483</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mta_tax</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>0.498611</td>\n",
       "      <td>0.026318</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tip_amount</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>1.728290</td>\n",
       "      <td>2.235994</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.260000</td>\n",
       "      <td>2.320000</td>\n",
       "      <td>17.500000</td>\n",
       "      <td>20.060000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tolls_amount</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>0.274108</td>\n",
       "      <td>1.252355</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12.500000</td>\n",
       "      <td>16.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>0.299960</td>\n",
       "      <td>0.003468</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_amount</th>\n",
       "      <td>10833472.0</td>\n",
       "      <td>15.454398</td>\n",
       "      <td>12.301355</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.300000</td>\n",
       "      <td>11.620000</td>\n",
       "      <td>17.160000</td>\n",
       "      <td>95.150000</td>\n",
       "      <td>143.300000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            count       mean        std         min  \\\n",
       "VendorID               10833472.0   1.537194   0.498615    1.000000   \n",
       "passenger_count        10833472.0   1.672939   1.326974    1.000000   \n",
       "trip_distance          10833472.0   2.864503   3.477488    0.000000   \n",
       "pickup_longitude       10833472.0 -72.829468   9.127288 -121.934288   \n",
       "pickup_latitude        10833472.0  40.120878   5.028075    0.000000   \n",
       "RatecodeID             10833472.0   1.032457   0.251059    1.000000   \n",
       "dropoff_longitude      10833472.0 -72.894300   8.869680 -121.933487   \n",
       "dropoff_latitude       10833472.0  40.157452   4.886301    0.000000   \n",
       "payment_type           10833472.0   1.338691   0.473265    1.000000   \n",
       "fare_amount            10833472.0  12.339944  10.014654    0.000000   \n",
       "extra                  10833472.0   0.313497   0.365483    0.000000   \n",
       "mta_tax                10833472.0   0.498611   0.026318    0.000000   \n",
       "tip_amount             10833472.0   1.728290   2.235994    0.000000   \n",
       "tolls_amount           10833472.0   0.274108   1.252355    0.000000   \n",
       "improvement_surcharge  10833472.0   0.299960   0.003468    0.000000   \n",
       "total_amount           10833472.0  15.454398  12.301355    0.000000   \n",
       "\n",
       "                             25%        50%        75%     99.95%         max  \n",
       "VendorID                1.000000   2.000000   2.000000   2.000000    2.000000  \n",
       "passenger_count         1.000000   1.000000   2.000000   6.000000    6.000000  \n",
       "trip_distance           1.000000   1.670000   3.060000  23.400000   26.900000  \n",
       "pickup_longitude      -73.991508 -73.981392 -73.966164   0.000000    0.000000  \n",
       "pickup_latitude        40.736408  40.753738  40.768108  40.851388   60.908756  \n",
       "RatecodeID              1.000000   1.000000   1.000000   5.000000    6.000000  \n",
       "dropoff_longitude     -73.991058 -73.979424 -73.962021   0.000000    0.000000  \n",
       "dropoff_latitude       40.734928  40.754189  40.769634  40.896264   60.908756  \n",
       "payment_type            1.000000   1.000000   2.000000   2.000000    2.000000  \n",
       "fare_amount             6.500000   9.000000  14.000000  75.000000  110.000000  \n",
       "extra                   0.000000   0.000000   0.500000   1.000000    1.000000  \n",
       "mta_tax                 0.500000   0.500000   0.500000   0.500000    0.500000  \n",
       "tip_amount              0.000000   1.260000   2.320000  17.500000   20.060000  \n",
       "tolls_amount            0.000000   0.000000   0.000000  12.500000   16.100000  \n",
       "improvement_surcharge   0.300000   0.300000   0.300000   0.300000    0.300000  \n",
       "total_amount            8.300000  11.620000  17.160000  95.150000  143.300000  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# now the numerical values are close to reality\n",
    "data_b.describe(percentiles=[.25, .5, .75, .9995]).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "788e5592-07f3-465e-8577-2b91912d1aa8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10833472, 19)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_b.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fc11f97-f5c3-4300-8363-f437a21872b9",
   "metadata": {},
   "source": [
    "__Regression models__ work with numerical variables, but we have a timestamp columns in the dataset - `tpep_pickup_datetime` and `tpep_dropoff_datetime`. I can't just remove them, because I lose important information then. So I extract `day`, `weekday` and `hour` from the pick-up datetime column to keep it for the regression model.\n",
    "\n",
    "I will also convert `Y` and `N` values in the column `store_and_fwd_flag` to `1` and `0` respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "2b326c35-699c-4b7c-86d8-88c70924c961",
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert 'Y' and 'N' to '1' and '0'\n",
    "data_b.store_and_fwd_flag = np.where(data_b.store_and_fwd_flag == 'Y', 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "6dea9fe1-b839-4c11-a750-8a330c1ac63f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create additional columns by extracting weekday, day and hour from 'tpep_pickup_datetime' column\n",
    "data_b['weekday'] = data_b['tpep_pickup_datetime'].dt.weekday\n",
    "data_b['day'] = data_b['tpep_pickup_datetime'].dt.day\n",
    "data_b['hour'] = data_b['tpep_pickup_datetime'].dt.hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "fc3514a0-c96e-4cea-a83e-1413e417ea0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove timestamp columns\n",
    "data_b.drop(['tpep_pickup_datetime', 'tpep_dropoff_datetime'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "b4852a78-7a69-4a3d-b951-ef1b9a883980",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VendorID                   int64\n",
       "passenger_count            int64\n",
       "trip_distance            float64\n",
       "pickup_longitude         float64\n",
       "pickup_latitude          float64\n",
       "RatecodeID                 int64\n",
       "store_and_fwd_flag         int32\n",
       "dropoff_longitude        float64\n",
       "dropoff_latitude         float64\n",
       "payment_type               int64\n",
       "fare_amount              float64\n",
       "extra                    float64\n",
       "mta_tax                  float64\n",
       "tip_amount               float64\n",
       "tolls_amount             float64\n",
       "improvement_surcharge    float64\n",
       "total_amount             float64\n",
       "weekday                    int64\n",
       "day                        int64\n",
       "hour                       int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# so, we have only numerical values here\n",
    "data_b.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9eb03435-779d-44ce-a7ac-31d72e84ced3",
   "metadata": {},
   "source": [
    "Before creating a __regression model__, let's see which __variables__ have the strongest and weakest __correlation__ with `fare_amount` and also which variables correlate with each other"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "046ad373-b2f8-472b-b7fb-2d380dffb4f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# correlation between variables\n",
    "corr = data_b.corr().sort_values(by='total_amount', ascending=False)\n",
    "\n",
    "# plot it\n",
    "fig, ax = plt.subplots(figsize = (20,12))\n",
    "sns.heatmap(corr, annot = True, cmap ='BrBG', ax = ax, fmt='.2f', linewidths = 0.05, annot_kws = {'size': 17})\n",
    "ax.tick_params(labelsize = 15)\n",
    "ax.set_title('Correlation with total_amount\\n', fontsize = 22)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "979f9d7b-6bde-43f4-8bec-3171c6dd8ba9",
   "metadata": {},
   "source": [
    "We see strong positive correlations between `total_amount` and `trip_distance`, `fare_amount`, `tip_amount` and `tolls_amount`. And it looks logical.\n",
    "\n",
    "Therefore, I will use a __linear regression model__ trying to find the most __features__ that explain our __target__ variable and also their __contribution__ to its value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "72c33530-1269-499b-97cf-dac114b00727",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error # metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b65ee7d-20a9-43b8-9b71-c56bcf750aa7",
   "metadata": {},
   "source": [
    "Our target variable `y` is a `total_amount` column and our features `X` are all other numerical preprocessed variables from `data_b`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "2d47344d-e6b2-4674-b800-9471e0d60a06",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data_b.drop('total_amount', axis=1)\n",
    "y = data_b['total_amount']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ead49a43-0371-43fe-9491-9f8ce5bf2c6d",
   "metadata": {},
   "source": [
    "Now, let's split sequentially our dataset to `train` and `test` sets for further training and testing the regression model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "e44ce5dd-9b3d-4ccf-9420-3fca6283ad4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78b262e8-aa78-44c8-9619-06f36ebd908f",
   "metadata": {},
   "source": [
    "Train the __Linear Regression__ model with default properties"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "8aa75892-19da-4316-b64f-8e206045d839",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lin_reg = LinearRegression()\n",
    "\n",
    "# training the model\n",
    "lin_reg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9aacf31a-bb79-49bf-a3c3-312797423464",
   "metadata": {},
   "source": [
    "Now use the trained model to predict `total_amount` based on the features from the `test` part of our dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "7f4c25fc-2250-47d6-b6e8-9b1296305bf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make prediction\n",
    "y_pred = lin_reg.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbdab64e-e6d4-42af-ad51-2eb947b4d9de",
   "metadata": {},
   "source": [
    "### Model Evluation - checking the model accuracy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d96a7ed-520a-44b2-9aeb-f1c3ef532d6d",
   "metadata": {},
   "source": [
    "Now we have 20% of our dataset with initial values of `total_amount` - __y_test__ and predicted - __y_pred__.\n",
    "\n",
    "We'll compare them using statistical metrics.\n",
    "\n",
    "So, in order to assess the accuracy of the model, I'll use the following metrics:\n",
    "- MSE - mean_squared_error \n",
    "- RMSE - Root-mean-square deviation\n",
    "- R2 - coefficient of determination\n",
    "- MAE - mean_absolute_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "cad7fc84-02e0-4608-b25c-43692f580a4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# for RMSE we need a small function\n",
    "def rmse(y, y_pred):\n",
    "    return np.sqrt(mean_squared_error(y, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "aba7edda-e51d-4eee-a073-fee5dc7983ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The lowest the better:\n",
      "\n",
      "MAE: 0.00011284654974338399\n",
      "RMSE: 0.010622925667789641\n",
      "MAE: 7.775121876345914e-05\n",
      "\n",
      "The closest to 1 the better:\n",
      "\n",
      "R2 score: 0.9999992264251094\n"
     ]
    }
   ],
   "source": [
    "# calculating and printing the metrics\n",
    "print('The lowest the better:\\n')\n",
    "print(f'MAE: {mean_squared_error(y_test, y_pred)}')\n",
    "print(f'RMSE: {rmse(y_test, y_pred)}')\n",
    "print(f'MAE: {mean_absolute_error(y_test, y_pred)}')\n",
    "print()\n",
    "print('The closest to 1 the better:\\n')\n",
    "print(f'R2 score: {r2_score(y_test, y_pred)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1885582-9d48-4ca1-8b84-213df3e9e0f3",
   "metadata": {},
   "source": [
    "### Find regression coefficients and make an equation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "9bc112de-217e-47ee-9ab7-cb0882e514df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept: -0.018414604110684962\n",
      "\n",
      "Coefficients: [-1.74855084e-05  1.38065078e-06 -8.36300300e-05 -1.20375749e-05\n",
      " -2.07685216e-05 -7.00851006e-05  2.19626915e-05  7.58173577e-05\n",
      "  1.36813565e-04 -2.43817909e-05  1.00003145e+00  1.00003036e+00\n",
      "  1.00130611e+00  1.00000017e+00  9.99980461e-01  1.05911905e+00\n",
      "  6.84015799e-06 -1.50443511e-06 -9.63564164e-07]\n",
      "\n",
      "Score: 0.9999996199789792\n"
     ]
    }
   ],
   "source": [
    "#display intercept, regression coefficients and R-squared value of model\n",
    "print(f'Intercept: {lin_reg.intercept_}', f'Coefficients: {lin_reg.coef_}', f'Score: {lin_reg.score(X, y)}', sep='\\n\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "ec3cc183-cae2-4069-8d6e-9b05295cd552",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We can see that the R2 value of the model is 0.9999996199789792\n"
     ]
    }
   ],
   "source": [
    "print(f'We can see that the R2 value of the model is {lin_reg.score(X, y)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c63a459-28f5-4aca-b303-5a4a3634f6e5",
   "metadata": {},
   "source": [
    "This means that 99.99% of the variation of the `total_amount` variable can be explained by our variables in the model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dea9193a-a3fc-4444-9e58-af25fe312084",
   "metadata": {},
   "source": [
    "Now, I show the `features` and their `coefficients` to make a final `equation`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "2f89595b-be48-40a2-a1e7-a986417b153c",
   "metadata": {},
   "outputs": [],
   "source": [
    "coefs = ['{:f}'.format(item) for item in lin_reg.coef_]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "3ae6ffae-7354-43b2-bfef-a7b67e45f744",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>VendorID</th>\n",
       "      <td>-0.000017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>passenger_count</th>\n",
       "      <td>0.000001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trip_distance</th>\n",
       "      <td>-0.000084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pickup_longitude</th>\n",
       "      <td>-0.000012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pickup_latitude</th>\n",
       "      <td>-0.000021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RatecodeID</th>\n",
       "      <td>-0.000070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <td>0.000022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <td>0.000076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <td>0.000137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>payment_type</th>\n",
       "      <td>-0.000024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fare_amount</th>\n",
       "      <td>1.000031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extra</th>\n",
       "      <td>1.000030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mta_tax</th>\n",
       "      <td>1.001306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tip_amount</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tolls_amount</th>\n",
       "      <td>0.999980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <td>1.059119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weekday</th>\n",
       "      <td>0.000007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>day</th>\n",
       "      <td>-0.000002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hour</th>\n",
       "      <td>-0.000001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               0\n",
       "VendorID               -0.000017\n",
       "passenger_count         0.000001\n",
       "trip_distance          -0.000084\n",
       "pickup_longitude       -0.000012\n",
       "pickup_latitude        -0.000021\n",
       "RatecodeID             -0.000070\n",
       "store_and_fwd_flag      0.000022\n",
       "dropoff_longitude       0.000076\n",
       "dropoff_latitude        0.000137\n",
       "payment_type           -0.000024\n",
       "fare_amount             1.000031\n",
       "extra                   1.000030\n",
       "mta_tax                 1.001306\n",
       "tip_amount              1.000000\n",
       "tolls_amount            0.999980\n",
       "improvement_surcharge   1.059119\n",
       "weekday                 0.000007\n",
       "day                    -0.000002\n",
       "hour                   -0.000001"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(data=coefs, index=X_train.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64c8f839-54fb-4883-9e99-a4e93ff60f6d",
   "metadata": {},
   "source": [
    "#### Regression Equation"
   ]
  },
  {
   "cell_type": "raw",
   "id": "fe878314-ae0a-4e70-af9e-41f4cd11d078",
   "metadata": {},
   "source": [
    "total_amount = -0.018414604110684962 - Vendor * 0.000017\n",
    "                                     + passenger_count * 0.000001 \n",
    "                                     - trip_distance * 0.000084\n",
    "                                     - pickup_longitude * 0.000012\n",
    "                                     - pickup_latitude * 0.000021\n",
    "                                     - RatecodeID * 0.000070\n",
    "                                     + store_and_fwd_flag * 0.000022\n",
    "                                     + dropoff_longitude * 0.000076\n",
    "                                     + dropoff_latitude * 0.000137\n",
    "                                     - payment_type * 0.000024\n",
    "                                     + fare_amount * 1.000031\n",
    "                                     + extra * 1.000030\n",
    "                                     + mta_tax * 1.001306\n",
    "                                     + tip_amount * 1.000000\n",
    "                                     + tolls_amount * 0.999980\n",
    "                                     + improvement_surcharge * 1.059119\n",
    "                                     + weekday * 0.000007\n",
    "                                     - day * 0.000002\n",
    "                                     - hour * 0.000001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "991c415a-92bf-44ea-b887-fd675e68a2d5",
   "metadata": {},
   "source": [
    "It looks like the `accuracy` of our `trained model` is good enough, so we use it to `predict` the `total amount` paid on a trip for the trip records shown in `New Sample` file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "6a78a47c-8a9e-4ee7-bbaa-d60f4e4333a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>2/25/2016 17:24</td>\n",
       "      <td>2/25/2016 17:27</td>\n",
       "      <td>2</td>\n",
       "      <td>0.70</td>\n",
       "      <td>-73.947250</td>\n",
       "      <td>40.763771</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.992012</td>\n",
       "      <td>40.735390</td>\n",
       "      <td>2</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2/25/2016 23:10</td>\n",
       "      <td>2/25/2016 23:31</td>\n",
       "      <td>2</td>\n",
       "      <td>5.52</td>\n",
       "      <td>-73.983017</td>\n",
       "      <td>40.750992</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.988586</td>\n",
       "      <td>40.758839</td>\n",
       "      <td>2</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2/1/2016 0:00</td>\n",
       "      <td>2/1/2016 0:10</td>\n",
       "      <td>6</td>\n",
       "      <td>1.99</td>\n",
       "      <td>-73.992340</td>\n",
       "      <td>40.758202</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.964355</td>\n",
       "      <td>40.757977</td>\n",
       "      <td>1</td>\n",
       "      <td>9.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2/1/2016 0:00</td>\n",
       "      <td>2/1/2016 0:05</td>\n",
       "      <td>1</td>\n",
       "      <td>1.50</td>\n",
       "      <td>-73.981453</td>\n",
       "      <td>40.749722</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.982323</td>\n",
       "      <td>40.763985</td>\n",
       "      <td>2</td>\n",
       "      <td>6.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2/1/2016 0:00</td>\n",
       "      <td>2/1/2016 0:20</td>\n",
       "      <td>1</td>\n",
       "      <td>5.60</td>\n",
       "      <td>-74.000603</td>\n",
       "      <td>40.729755</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.951324</td>\n",
       "      <td>40.669834</td>\n",
       "      <td>1</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n",
       "0         2      2/25/2016 17:24       2/25/2016 17:27                2   \n",
       "1         2      2/25/2016 23:10       2/25/2016 23:31                2   \n",
       "2         2        2/1/2016 0:00         2/1/2016 0:10                6   \n",
       "3         1        2/1/2016 0:00         2/1/2016 0:05                1   \n",
       "4         2        2/1/2016 0:00         2/1/2016 0:20                1   \n",
       "\n",
       "   trip_distance  pickup_longitude  pickup_latitude  RatecodeID  \\\n",
       "0           0.70        -73.947250        40.763771           1   \n",
       "1           5.52        -73.983017        40.750992           1   \n",
       "2           1.99        -73.992340        40.758202           1   \n",
       "3           1.50        -73.981453        40.749722           1   \n",
       "4           5.60        -74.000603        40.729755           1   \n",
       "\n",
       "  store_and_fwd_flag  dropoff_longitude  dropoff_latitude  payment_type  \\\n",
       "0                  N         -73.992012         40.735390             2   \n",
       "1                  N         -73.988586         40.758839             2   \n",
       "2                  N         -73.964355         40.757977             1   \n",
       "3                  N         -73.982323         40.763985             2   \n",
       "4                  N         -73.951324         40.669834             1   \n",
       "\n",
       "   fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "0          5.0    0.0      0.5         0.0           0.0   \n",
       "1         20.0    0.5      0.5         0.0           0.0   \n",
       "2          9.5    0.5      0.5         0.7           0.0   \n",
       "3          6.5    0.5      0.5         0.0           0.0   \n",
       "4         20.0    0.5      0.5         4.0           0.0   \n",
       "\n",
       "   improvement_surcharge  \n",
       "0                    0.3  \n",
       "1                    0.3  \n",
       "2                    0.3  \n",
       "3                    0.3  \n",
       "4                    0.3  "
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# loading new_sample dataset\n",
    "new_sample = pd.read_csv('dataset/Assessment 2 dataset/New Sample.csv')\n",
    "new_sample.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8ec164d-d990-4581-8156-76c766bf5d19",
   "metadata": {},
   "source": [
    "We need to `preprocess` the `New Sample` data first in the same way as we did it with the `trained dataset`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "463dda30-4823-4f75-aff1-56f3ef161eaa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>weekday</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0.70</td>\n",
       "      <td>-73.947250</td>\n",
       "      <td>40.763771</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-73.992012</td>\n",
       "      <td>40.735390</td>\n",
       "      <td>2</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>3</td>\n",
       "      <td>25</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5.52</td>\n",
       "      <td>-73.983017</td>\n",
       "      <td>40.750992</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-73.988586</td>\n",
       "      <td>40.758839</td>\n",
       "      <td>2</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>3</td>\n",
       "      <td>25</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1.99</td>\n",
       "      <td>-73.992340</td>\n",
       "      <td>40.758202</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-73.964355</td>\n",
       "      <td>40.757977</td>\n",
       "      <td>1</td>\n",
       "      <td>9.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.50</td>\n",
       "      <td>-73.981453</td>\n",
       "      <td>40.749722</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-73.982323</td>\n",
       "      <td>40.763985</td>\n",
       "      <td>2</td>\n",
       "      <td>6.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5.60</td>\n",
       "      <td>-74.000603</td>\n",
       "      <td>40.729755</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-73.951324</td>\n",
       "      <td>40.669834</td>\n",
       "      <td>1</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   VendorID  passenger_count  trip_distance  pickup_longitude  \\\n",
       "0         2                2           0.70        -73.947250   \n",
       "1         2                2           5.52        -73.983017   \n",
       "2         2                6           1.99        -73.992340   \n",
       "3         1                1           1.50        -73.981453   \n",
       "4         2                1           5.60        -74.000603   \n",
       "\n",
       "   pickup_latitude  RatecodeID  store_and_fwd_flag  dropoff_longitude  \\\n",
       "0        40.763771           1                   0         -73.992012   \n",
       "1        40.750992           1                   0         -73.988586   \n",
       "2        40.758202           1                   0         -73.964355   \n",
       "3        40.749722           1                   0         -73.982323   \n",
       "4        40.729755           1                   0         -73.951324   \n",
       "\n",
       "   dropoff_latitude  payment_type  fare_amount  extra  mta_tax  tip_amount  \\\n",
       "0         40.735390             2          5.0    0.0      0.5         0.0   \n",
       "1         40.758839             2         20.0    0.5      0.5         0.0   \n",
       "2         40.757977             1          9.5    0.5      0.5         0.7   \n",
       "3         40.763985             2          6.5    0.5      0.5         0.0   \n",
       "4         40.669834             1         20.0    0.5      0.5         4.0   \n",
       "\n",
       "   tolls_amount  improvement_surcharge  weekday  day  hour  \n",
       "0           0.0                    0.3        3   25    17  \n",
       "1           0.0                    0.3        3   25    23  \n",
       "2           0.0                    0.3        0    1     0  \n",
       "3           0.0                    0.3        0    1     0  \n",
       "4           0.0                    0.3        0    1     0  "
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_sample.tpep_pickup_datetime = pd.to_datetime(new_sample.tpep_pickup_datetime)\n",
    "new_sample.store_and_fwd_flag = np.where(new_sample.store_and_fwd_flag == 'Y', 1, 0)\n",
    "new_sample['weekday'] = new_sample['tpep_pickup_datetime'].dt.weekday\n",
    "new_sample['day'] = new_sample['tpep_pickup_datetime'].dt.day\n",
    "new_sample['hour'] = new_sample['tpep_pickup_datetime'].dt.hour\n",
    "new_sample.drop(['tpep_pickup_datetime', 'tpep_dropoff_datetime'], axis=1, inplace=True)\n",
    "new_sample.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "144946a0-8122-49be-8fe7-c1e5684d4b33",
   "metadata": {},
   "source": [
    "Now run the `trained model` on the values to predict the `total_amount`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "2b4eda3d-da3e-4ec3-9163-1fe39bb27282",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_sample_total_amount = lin_reg.predict(new_sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "0933b83e-9e33-4038-a6d9-3c8636a0255d",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = pd.DataFrame(new_sample_total_amount, columns=['predicted_total_amount'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c3db8ee-be9d-4fc9-a45a-271c8f59908f",
   "metadata": {},
   "source": [
    "Tabulating the predicted values in the order the records are arranged in the file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "6c20b2fa-f541-4a3b-9ff1-78d4ac06b5de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predicted_total_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.799895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21.299977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11.500012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.799944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>25.300023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>17.299952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>9.359952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7.799964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9.799941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>17.299981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11.759946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>17.299992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>8.999970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>18.000025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>12.359986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>6.959957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>20.159999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>21.960021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>36.339773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>10.789982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>68.801417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>53.300021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>12.739993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>8.759945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>28.560024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>15.359945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>18.960044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>10.299996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>20.160012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>12.799964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>8.299934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>17.160009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>9.799943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>6.799933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>25.560041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>9.299946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>4.799931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>29.749984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>7.239958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>8.799992</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    predicted_total_amount\n",
       "0                 5.799895\n",
       "1                21.299977\n",
       "2                11.500012\n",
       "3                 7.799944\n",
       "4                25.300023\n",
       "5                17.299952\n",
       "6                 9.359952\n",
       "7                 7.799964\n",
       "8                 9.799941\n",
       "9                17.299981\n",
       "10               11.759946\n",
       "11               17.299992\n",
       "12                8.999970\n",
       "13               18.000025\n",
       "14               12.359986\n",
       "15                6.959957\n",
       "16               20.159999\n",
       "17               21.960021\n",
       "18               36.339773\n",
       "19               10.789982\n",
       "20               68.801417\n",
       "21               53.300021\n",
       "22               12.739993\n",
       "23                8.759945\n",
       "24               28.560024\n",
       "25               15.359945\n",
       "26               18.960044\n",
       "27               10.299996\n",
       "28               20.160012\n",
       "29               12.799964\n",
       "30                8.299934\n",
       "31               17.160009\n",
       "32                9.799943\n",
       "33                6.799933\n",
       "34               25.560041\n",
       "35                9.299946\n",
       "36                4.799931\n",
       "37               29.749984\n",
       "38                7.239958\n",
       "39                8.799992"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0137fb42-6531-4a12-b57e-df67099bdb33",
   "metadata": {},
   "source": [
    "## 4: Discussion"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d110477-6e6c-4619-ac39-5fd7df49aed6",
   "metadata": {},
   "source": [
    "We have trained a Linear Regression model with default properties and achieved outstanding results in predicting our target variable using the listed features. Despite the availability of many other regression models, we didn't need to explore them as our simple model produced a remarkable accuracy of 99.99% on the test dataset.\n",
    "\n",
    "This model serves as a valuable tool for predicting the total amount of a taxi drive and determining which features contribute most significantly to the amount value.\n",
    "\n",
    "Prior to modeling, we preprocessed the data, making some assumptions and allowances. We observed numerous incorrect values and mistakes in the data. For example, some trip distances were either null or unrealistically large. To rectify this, we could have calculated the distance between the pick-up and drop-off geo locations, but this is also not reliable due to numerous records containing zeros or identical values.\n",
    "\n",
    "Ideally, we could have verified and corrected values in the datasets using some calculations to obtain more precise data. However, our model produced excellent results even without such refinements."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "994e1053-6703-4ae8-bc00-9ee00338052c",
   "metadata": {},
   "source": [
    "## 5: Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "046d33b5-a7b4-4e04-985c-76dd807a3550",
   "metadata": {},
   "source": [
    "Based on the analysis of the taxi trip dataset, several key findings were uncovered. Firstly, the average demand for taxis varied across different days of the week. Specifically, Friday had the highest demand while Monday had the lowest demand. Secondly, the peak period for taxi operation was observed to be in the evening hours, particularly during rush hour times.\n",
    "\n",
    "Additionally, it was found that the average revenue generated by the taxi business was slightly higher during weekdays compared to weekends.\n",
    "\n",
    "After preprocessing and cleaning the data, a linear regression model was created to predict the total amount paid for a taxi trip, given trip information such as time, distance, fees, and fares. The model was trained on 80% of the data and tested on the remaining 20% to ensure its generalization abilities. The final model showed a good performance in predicting the total amount paid for a taxi trip, with a low RMSE (0.0106) and high R2 score (0.9999).\n",
    "\n",
    "In conclusion, the analysis of the taxi trip dataset provided insights into the daily trends and peak periods for taxi operation, as well as the factors affecting the total amount paid for a trip. The developed regression model could be used to predict the total amount paid for a taxi trip, helping the taxi business to optimize their pricing strategies and increase revenue."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f22c8c8-d976-452d-98eb-b2a8945e85a1",
   "metadata": {},
   "source": [
    "## 6: Reference"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c85285af-197b-45f8-a650-6d4826d4fce6",
   "metadata": {},
   "source": [
    "__Data:__ The dataset was sourced from the NYC Taxi & Limousine Commission (TLC) official website. \n",
    "\n",
    "The dataset contains several explanatory variables used to assess a completed trip such as pick-up and drop-off dates/times, pick-up and drop-off locations, trip distances, itemized fares, rate types, payment types, and driver-reported passenger counts. \n",
    "\n",
    "A subsample of the original data is provided to use for the tasks itemised in the task sections. The trip records are divided into two files Main Sample and New Sample, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ace85462-d074-4662-a1e0-114e9d7b1872",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
